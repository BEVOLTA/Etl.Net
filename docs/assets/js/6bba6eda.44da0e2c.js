"use strict";(self.webpackChunketlnetdocumentation=self.webpackChunketlnetdocumentation||[]).push([[7430],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(i),u=r,d=f["".concat(s,".").concat(u)]||f[u]||m[u]||a;return i?n.createElement(d,o(o({ref:t},p),{},{components:i})):n.createElement(d,o({ref:t},p))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},4890:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=i(7462),r=(i(7294),i(3905));const a={sidebar_position:4},o="Create files",l={unversionedId:"recipes/createFiles",id:"recipes/createFiles",title:"Create files",description:"Handling files in ETL.NET involves manipulating streams of payloads implementing the interface IFileValue. But how to actually create these payloads from nothing if they are not taken from any file source?",source:"@site/docs/recipes/4_createFiles.md",sourceDirName:"recipes",slug:"/recipes/createFiles",permalink:"/Etl.Net/docs/recipes/createFiles",draft:!1,editUrl:"https://github.com/paillave/Etl.Net/blob/develop/documentation/docs/recipes/4_createFiles.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Read files",permalink:"/Etl.Net/docs/recipes/readFiles"},next:{title:"Data access native SQL Server",permalink:"/Etl.Net/docs/recipes/sqlServer"}},s={},c=[{value:"One file",id:"one-file",level:2},{value:"One file with no specific format",id:"one-file-with-no-specific-format",level:3},{value:"One file in CSV or Excel format",id:"one-file-in-csv-or-excel-format",level:3},{value:"Many files",id:"many-files",level:2},{value:"Many files with no specific format",id:"many-files-with-no-specific-format",level:3},{value:"Many files in CSV or Excel format",id:"many-files-in-csv-or-excel-format",level:3}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-files"},"Create files"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/recipes/dealWithFiles"},"Handling files in ETL.NET")," involves manipulating streams of payloads implementing the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"IFileValue"),". But how to actually create these payloads from nothing if they are not taken from any file source?"),(0,r.kt)("h2",{id:"one-file"},"One file"),(0,r.kt)("h3",{id:"one-file-with-no-specific-format"},"One file with no specific format"),(0,r.kt)("p",null,"The first way to create a file, is to create a file with a content with no specific or known format. In this situation, the principle is to create an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"FileValueWriter")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"FileValueWriter.Create")," static method. ",(0,r.kt)("inlineCode",{parentName:"p"},"FileValueWriter")," implements ",(0,r.kt)("inlineCode",{parentName:"p"},"IFileValue")," and that wraps nearly every method of ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamWriter"),". ",(0,r.kt)("em",{parentName:"p"},"Note: all these methods return the current instance so that they can be called in a fluent way."),"\nBefore this, the stream must be aggregated for it to issue lists of rows instead of single rows. To change a stream into a single stream event (",(0,r.kt)("inlineCode",{parentName:"p"},"ISingleStream"),") the operator ",(0,r.kt)("inlineCode",{parentName:"p"},"ToList")," can be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var streamOfFile = streamOfRows\n    .ToList("aggregate all rows")\n    .Select("create file", rows => FileValueWriter\n        .Create("fileExport.txt")\n        .WriteLine("this content has no specific format")\n        .Write(String.Join(", ", rows.Select(row => row.Name).ToList())));\n')),(0,r.kt)("h3",{id:"one-file-in-csv-or-excel-format"},"One file in CSV or Excel format"),(0,r.kt)("p",null,"In many occasions, writing a file will consist in creating an excel file, or a csv file with fixed width or delimited columns"),(0,r.kt)("p",null,"File creation extensions ",(0,r.kt)("inlineCode",{parentName:"p"},"Paillave.EtlNet.TextFile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Paillave.EtlNet.ExcelFile")," can change a stream into a ",(0,r.kt)("inlineCode",{parentName:"p"},"IFileValue")," instance out of the box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var streamOfFile = streamOfRows\n    .Select("create row to save", i => new { i.Index, i.Name })\n    .ToTextFileValue("save into csv file", "fileExport.csv", FlatFileDefinition.Create(i => new\n    {\n        Index = i.ToNumberColumn<int>("Idx", "."),\n        Name = i.ToColumn("Title")\n    }).IsColumnSeparated(\',\'));\n')),(0,r.kt)("h2",{id:"many-files"},"Many files"),(0,r.kt)("h3",{id:"many-files-with-no-specific-format"},"Many files with no specific format"),(0,r.kt)("p",null,"The way to create several files in a single process is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupBy")," operator."),(0,r.kt)("p",null,"The first way to use it is only possible if ",(0,r.kt)("inlineCode",{parentName:"p"},"FileValueWriter")," is used. This way to use ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupBy")," is to simply give the grouping key/keys. This way, the operator will issue one event per group containing the list of values contained in the group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var streamOfFile = streamOfRows\n    .GroupBy("group rows", i => i.CategoryId) \n    // can also be written this way to permit several grouping keys:\n    // .GroupBy("group rows", i => new { i.CategoryId }) \n    .Select("create file", rows => FileValueWriter\n        .Create($"otherFileExport{rows.FirstValue.CategoryId}.txt")\n        .WriteLine($"here is the list of indexes in the category {rows.FirstValue.CategoryId}")\n        .Write(String.Join(", ", rows.Aggregation.Select(row => row.Name).ToList())));\n')),(0,r.kt)("p",null,"The other way is to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupBy")," operator by giving a subprocess along with the grouping key. The subprocess is the definition of a process from a stream that will issue every event belonging to the group. With the substream, the ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupBy")," operator will give the first element of the group as it is very likely to be useful to create the file name. To achieve the same than what is above, it is just necessary to reproduce the pattern described higher within the subprocess:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var streamOfFile = streamOfRows\n    .GroupBy("process per group", i => i.CategoryId, (subStream, firstRow) => subStream\n        .ToList("aggregate all rows")\n        .Select("create file", rows => FileValueWriter\n            .Create($"fileExport{firstRow?.CategoryId}.txt")\n            .WriteLine($"here is the list of indexes in the category {firstRow?.CategoryId}")\n            .Write(String.Join(", ", rows.Select(row => row.Name).ToList()))));\n')),(0,r.kt)("h3",{id:"many-files-in-csv-or-excel-format"},"Many files in CSV or Excel format"),(0,r.kt)("p",null,"Defining a subprocess like shown in the example right above is the only way to go to produce several files by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Paillave.EtlNet.TextFile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Paillave.EtlNet.ExcelFile")," extensions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'var streamOfFile = streamOfRows\n    .GroupBy("process per group", i => i.CategoryId, (subStream, firstRow) => subStream\n        .Select("create row to save", i => new { i.Index, i.Name })\n        .ToTextFileValue(\n            "save into csv file", \n            $"fileExport{firstRow?.CategoryId}.csv", \n            FlatFileDefinition.Create(i => new\n            {\n                Index = i.ToNumberColumn<int>("Idx", "."),\n                Name = i.ToColumn("Title")\n            })));\n')),(0,r.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Keep in mind that the given first row will be null when called to evaluate the execution plan by the runtime. Therefore, ensure that no null exception is raised when using it.\nOf course, during the actual process, it will ",(0,r.kt)("strong",{parentName:"p"},"never")," be null."))))}m.isMDXComponent=!0}}]);