"use strict";(self.webpackChunketlnetdocumentation=self.webpackChunketlnetdocumentation||[]).push([[7336],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(v,i(i({ref:t},c),{},{components:n})):a.createElement(v,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51723:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={sidebar_position:7},s="Get many data",p={unversionedId:"recipes/getManyData",id:"recipes/getManyData",isDocsHomePage:!1,title:"Get many data",description:"Getting many data means that for each row entering in an operator, several ones are issued on its output.",source:"@site/docs/recipes/7_getManyData.md",sourceDirName:"recipes",slug:"/recipes/getManyData",permalink:"/Etl.Net/docs/recipes/getManyData",editUrl:"https://paillave.github.io/Etl.Net/edit/master/website/docs/recipes/7_getManyData.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Make a console application",permalink:"/Etl.Net/docs/recipes/consoleApplication"},next:{title:"Combine streams",permalink:"/Etl.Net/docs/recipes/linkStreams"}},c=[{value:"Values provider",id:"values-provider",children:[{value:"Make a value provider",id:"make-a-value-provider",children:[]},{value:"Use a value provider",id:"use-a-value-provider",children:[]}]},{value:"Shortcuts to make value providers",id:"shortcuts-to-make-value-providers",children:[]},{value:"Details about <code>PushValues</code>",id:"details-about-pushvalues",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-many-data"},"Get many data"),(0,o.kt)("p",null,"Getting many data means that for each row entering in an operator, several ones are issued on its output.\nWhatever the way to issue many rows always involve a factory method that is called for each occurrence. Every time, this method issues values for the operator."),(0,o.kt)("h2",{id:"values-provider"},"Values provider"),(0,o.kt)("p",null,"A value provider is a class that implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"IValuesProvider")," interface  has a method that issues values to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CrossApply")," operator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="IValuesProvider.cs"',title:'"IValuesProvider.cs"'},"public interface IValuesProvider<TValueIn, TValueOut>\n{\n    string TypeName { get; }\n    void PushValues(TValueIn input, Action<TValueOut> push, CancellationToken cancellationToken, IDependencyResolver resolver, IInvoker invoker);\n    ProcessImpact PerformanceImpact { get; }\n    ProcessImpact MemoryFootPrint { get; }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"As with the method ",(0,o.kt)("inlineCode",{parentName:"p"},"PushValues"),", nearly 100% of the work is done by the value provider, this one must mention to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CrossApply")," operator how heavy it is; this is the point of properties ",(0,o.kt)("inlineCode",{parentName:"p"},"PerformanceImpact")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MemoryFootPrint"),"."))),(0,o.kt)("h3",{id:"make-a-value-provider"},"Make a value provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'public class DemoValueProvider : IValuesProvider<string, string>\n{\n    public string TypeName => "Range of values provider";\n    public ProcessImpact PerformanceImpact => ProcessImpact.Light;\n    public ProcessImpact MemoryFootPrint => ProcessImpact.Light;\n    public void PushValues(string input, Action<string> push, CancellationToken cancellationToken, IDependencyResolver resolver, IInvoker invoker)\n    {\n        for (int i = 1; i <= 100; i++)\n            push($"{input}{i}");\n    }\n}\n')),(0,o.kt)("h3",{id:"use-a-value-provider"},"Use a value provider"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream\n    .CrossApply<string, string>("create values from factory", new DemoValueProvider())\n    .Do("print file name to console", i => Console.WriteLine(i));\n')),(0,o.kt)("h2",{id:"shortcuts-to-make-value-providers"},"Shortcuts to make value providers"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"EnumerableValuesProvider")," creates a value provider issuing a sequence of payloads from an enumeration depending on the input payload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream.CrossApply("create values from enumeration", EnumerableValuesProvider.Create<string, string>(ctx => Enumerable.Range(1, 100).Select(i => $"{ctx}{i}")));\n')),(0,o.kt)("p",null,"To reach the very same this way is shorter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream\n    .CrossApply("create values from enumeration", ctx => Enumerable.Range(1, 100).Select(i => $"{ctx}{i}"))\n    .Do("print file name to console", i => Console.WriteLine(i));\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SimpleValuesProvider")," creates a value provider that issues payloads using the given factory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream.CrossApply("create values from factory", SimpleValuesProvider.Create<string, string>((ctx, dependencyResolver, cancellationToken, push) =>\n    {\n        for (int i = 1; i <= 100; i++)\n            push($"{ctx}{i}");\n    }));\n')),(0,o.kt)("p",null,"As well, an even shorter way exists for this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream\n    .CrossApply<string, string>("create values from factory", (ctx, dependencyResolver, cancellationToken, push) =>\n    {\n        for (int i = 1; i <= 100; i++)\n            push($"{ctx}{i}");\n    })\n    .Do("print file name to console", i => Console.WriteLine(i));\n')),(0,o.kt)("h2",{id:"details-about-pushvalues"},"Details about ",(0,o.kt)("inlineCode",{parentName:"h2"},"PushValues")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"TValueIn input")),(0,o.kt)("td",{parentName:"tr",align:null},"The current payload for which several other payloads will be issued by the ",(0,o.kt)("inlineCode",{parentName:"td"},"CrossApply")," operator")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Action<TValueOut> push")),(0,o.kt)("td",{parentName:"tr",align:null},"The method to call for the ",(0,o.kt)("inlineCode",{parentName:"td"},"CrossApply")," operator to issue a payload")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CancellationToken cancellationToken")),(0,o.kt)("td",{parentName:"tr",align:null},"The cancellation token that permits to know if the process must be stopped")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"IDependencyResolver resolver")),(0,o.kt)("td",{parentName:"tr",align:null},"This is the access to the dependency injection provided by the runtime")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"IInvoker invoker")),(0,o.kt)("td",{parentName:"tr",align:null},"Use this invoker to make calls of sql server for example. As they cannot be done concurrently, the invoker permits to sequence avery call within the same thread")))))}d.isMDXComponent=!0}}]);