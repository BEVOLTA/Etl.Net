"use strict";(self.webpackChunketlnetdocumentation=self.webpackChunketlnetdocumentation||[]).push([[783],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},86644:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={sidebar_position:12},c="Change/Create in stream data",s={unversionedId:"recipes/changeData",id:"recipes/changeData",title:"Change/Create in stream data",description:"Select",source:"@site/docs/recipes/13_changeData.md",sourceDirName:"recipes",slug:"/recipes/changeData",permalink:"/Etl.Net/docs/recipes/changeData",editUrl:"https://github.com/paillave/Etl.Net/blob/develop/documentation/docs/recipes/13_changeData.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Reduce/aggregate and distinct",permalink:"/Etl.Net/docs/recipes/reduceAndAggregate"},next:{title:"Restrict rows",permalink:"/Etl.Net/docs/recipes/changeScope"}},p={},u=[{value:"Select",id:"select",level:2},{value:"Fix",id:"fix",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"changecreate-in-stream-data"},"Change/Create in stream data"),(0,o.kt)("h2",{id:"select"},"Select"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Select")," is the regular way to create data within a stream. What is done in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," should ideally be pure."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," operator works in the same way than the ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," of linq, (except that the name of the operation must be transmitted as a first parameter)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{3-8}","{3-8}":!0},'contextStream\n    .CrossApply("create values from enumeration", ctx => Enumerable.Range(1, 100))\n    .Select("Create a value", i => new\n    {\n        Id = i,\n        OutputId = i % 3,\n        Label = $"Label{i}",\n    })\n    .Do("print file name to console", i => Console.WriteLine($"{i.Id}-{i.Label}"));\n')),(0,o.kt)("p",null,"If it is necessary to keep a context during the execution for an operator, a class that implements ",(0,o.kt)("inlineCode",{parentName:"p"},"ISelectProcessor")," must be done."),(0,o.kt)("p",null,"Here is an example of a generic select processor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"class ValueProcessorWithContext<TIn, TOut, TCtx> : ISelectProcessor<TIn, TOut>\n{\n    private readonly TCtx _context;\n    private readonly Func<TIn, TCtx, TOut> _process;\n    public ValueProcessorWithContext(TCtx context, Func<TIn, TCtx, TOut> process) \n        => (_context, _process) = (context, process);\n    public TOut ProcessRow(TIn value) \n        => _process(value, _context);\n}\n")),(0,o.kt)("p",null,"Here is the way this select processor can be used:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream\n    .CrossApply("create values from enumeration", ctx => Enumerable.Range(1, 100))\n    .Select("Create a value", new ValueProcessorWithContext<int, string, TempoContext>(\n        new TempoContext(),\n        (int v, TempoContext ctx) =>\n        {\n            if (v == 12)\n                ctx.Value1++;\n            if (v == 5)\n                ctx.Value2 = $"5 value already passed";\n            return $"{ctx.Value1}-{v} {ctx.Value2}";\n        }))\n    .Do("print file name to console", Console.WriteLine);\n')),(0,o.kt)("h2",{id:"fix"},"Fix"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Select")," is supposed to work with a pure mechanism. In the situation of simple amendments, this can be very verbose, and compels to create new values."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Fix")," permits to issue an updated payload in a clear and readable way, even if the payload is anonymous."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'contextStream\n    .CrossApply("create values from enumeration", ctx => Enumerable.Range(1, 100))\n    .Select("Create a value", i => new\n    {\n        Id = i,\n        OutputId = i % 3,\n        Label = (i % 3 == 2) ? null : $"Label{i}",\n    })\n    .Fix("fix value", o => o\n        .FixProperty(i => i.OutputId).AlwaysWith(i => i.OutputId * 10)\n        .FixProperty(i => i.Label).IfNullWith(i => $"New Label {i.Id}"))\n    .Do("print file name to console", i => Console.WriteLine($"{i.Id}-{i.Label}"));\n')))}d.isMDXComponent=!0}}]);