"use strict";(self.webpackChunketlnetdocumentation=self.webpackChunketlnetdocumentation||[]).push([[9185],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),l=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,m=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(a),d=n,g=u["".concat(m,".").concat(d)]||u[d]||p[d]||s;return a?r.createElement(g,o(o({ref:t},c),{},{components:a})):r.createElement(g,o({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<s;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3729:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const s={sidebar_position:8},o="Make a custom operator",i={unversionedId:"tutorials/customOperator",id:"tutorials/customOperator",title:"Make a custom operator",description:"CustomOperator",source:"@site/docs/tutorials/4_customOperator.md",sourceDirName:"tutorials",slug:"/tutorials/customOperator",permalink:"/Etl.Net/docs/tutorials/customOperator",draft:!1,editUrl:"https://github.com/paillave/Etl.Net/blob/develop/documentation/docs/tutorials/4_customOperator.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Execute, Track & Check",permalink:"/Etl.Net/docs/tutorials/trackAndCheck"},next:{title:"Deal with files and protocols",permalink:"/Etl.Net/docs/recipes/dealWithFiles"}},m={},l=[{value:"Simplest operator",id:"simplest-operator",level:2},{value:"Operator that issues a different stream",id:"operator-that-issues-a-different-stream",level:2}],c={toc:l};function p(e){let{components:t,...s}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"make-a-custom-operator"},"Make a custom operator"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"CustomOperator",src:a(1381).Z,width:"636",height:"300"})),(0,n.kt)("p",null,"Making a custom operator requires to understand ",(0,n.kt)("a",{parentName:"p",href:"/docs/quickstart/principle"},"how ETL.NET works behind the scenes"),"."),(0,n.kt)("h2",{id:"simplest-operator"},"Simplest operator"),(0,n.kt)("p",null,"First let's make the class that will host arguments for the operator. This class must contain all the input streams and all the necessary parameters for the operator."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public class CustomArgs\n{\n    public Stream<string> Stream { get; set; }\n}\n")),(0,n.kt)("p",null,"Then we must make a stream node. This will be the implementation of the operator. This is done by implementing a concrete version of ",(0,n.kt)("inlineCode",{parentName:"p"},"StreamNodeBase"),".\nIt has 3 type parameters:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The type of output events payloads"),(0,n.kt)("li",{parentName:"ol"},"The type of the output stream"),(0,n.kt)("li",{parentName:"ol"},"The type that hosts parameters, including input streams")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public class CustomStreamNode : StreamNodeBase<string, IStream<string>, CustomArgs>\n{\n    public CustomStreamNode(string name, CustomArgs args) : base(name, args) { }\n    public override ProcessImpact PerformanceImpact => ProcessImpact.Light;\n    public override ProcessImpact MemoryFootPrint => ProcessImpact.Light;\n    protected override IStream<string> CreateOutputStream(CustomArgs args)\n        => base.CreateUnsortedStream(args.Stream.Observable.Do(Console.WriteLine));\n}\n")),(0,n.kt)("p",null,"This operator processes ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," events from the only input stream by displaying it on console."),(0,n.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"How to make something more evolved than a simple ",(0,n.kt)("inlineCode",{parentName:"p"},"Do"),"?"),(0,n.kt)("p",{parentName:"div"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Do")," is one of the many reactive operators that are available. These operators are mostly the very same than the ones that are mentioned in ",(0,n.kt)("a",{parentName:"p",href:"http://reactivex.io/"},"ReactiveX")," (a nicer, visual and interactive way to understand reactive operators better can be found ",(0,n.kt)("a",{parentName:"p",href:"https://rxmarbles.com/"},"on rxmarble"),"). To get more examples, check the ones that are implemented in the the source code of this project."))),(0,n.kt)("p",null,"Now, an extension shall be done for an easier use of the operator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static partial class CustomEx\n{\n    public static IStream<string> Custom(this Stream<string> stream, string name)\n        => new CustomStreamNode(name, new CustomArgs { Stream = stream }).Output;\n}\n")),(0,n.kt)("p",null,"This operator makes a simple action without actually modifying the stream it self. The problem is that if we give a sorted/single/keyed stream on the input, we get a stream that is not marked as it anymore. For this we must permit to have a strongly typed stream on the input, ensuring it is still a stream of strings. Then we must have the output stream that is the same type of stream than the input one. The method ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateMatchingStream")," takes an observable to make a stream out of it that will match the given stream."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="CustomStreamNode.cs" {7,9,11,13,16,17,21,22}',title:'"CustomStreamNode.cs"',"{7,9,11,13,16,17,21,22}":!0},"using System;\nusing Paillave.Etl.Core;\nusing Paillave.Etl.Reactive.Operators;\n\nnamespace Demo\n{\n    public class CustomArgs<TStream> where TStream : IStream<string>\n    {\n        public TStream Stream { get; set; }\n    }\n    public class CustomStreamNode<TStream> : StreamNodeBase<string, TStream, CustomArgs<TStream>> where TStream : IStream<string>\n    {\n        public CustomStreamNode(string name, CustomArgs<TStream> args) : base(name, args) { }\n        public override ProcessImpact PerformanceImpact => ProcessImpact.Light;\n        public override ProcessImpact MemoryFootPrint => ProcessImpact.Light;\n        protected override TStream CreateOutputStream(CustomArgs<TStream> args)\n            => base.CreateMatchingStream(args.Stream.Observable.Do(Console.WriteLine), args.Stream);\n    }\n    public static partial class CustomEx\n    {\n        public static TStream Custom<TStream>(this TStream stream, string name) where TStream : IStream<string>\n            => new CustomStreamNode<TStream>(name, new CustomArgs<TStream> { Stream = stream }).Output;\n    }\n}\n")),(0,n.kt)("h2",{id:"operator-that-issues-a-different-stream"},"Operator that issues a different stream"),(0,n.kt)("p",null,"Here, we will remake the ",(0,n.kt)("inlineCode",{parentName:"p"},"Select")," operator that we will call ",(0,n.kt)("inlineCode",{parentName:"p"},"CustomSelect"),"."),(0,n.kt)("p",null,"The operator needs the input stream, and how to transform every occurrence. We will make the arguments class to contain this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public class CustomSelectArgs<TIn, TOut>\n{\n    public Stream<TIn> Stream { get; set; }\n    public Func<TIn, TOut> Selector { get; set; }\n}\n")),(0,n.kt)("p",null,"Now, we will make the operator by knowing that, as a matter of a fact, whatever the order of the stream, as a transformation of payload is done, we can't possibly know if the stream will still be sorted or keyed. This is why we will leave the output stream as an ",(0,n.kt)("inlineCode",{parentName:"p"},"IStream")," and we will issue it with a ",(0,n.kt)("inlineCode",{parentName:"p"},"CreateUnsortedStream"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{6,7}","{6,7}":!0},"public class CustomSelectStreamNode<TIn, TOut> : StreamNodeBase<TOut, IStream<TOut>, CustomSelectArgs<TIn, TOut>>\n{\n    public CustomSelectStreamNode(string name, CustomSelectArgs<TIn, TOut> args) : base(name, args) { }\n    public override ProcessImpact PerformanceImpact => ProcessImpact.Light;\n    public override ProcessImpact MemoryFootPrint => ProcessImpact.Light;\n    protected override IStream<TOut> CreateOutputStream(CustomSelectArgs<TIn, TOut> args)\n        => base.CreateUnsortedStream(args.Stream.Observable.Map(args.Selector));\n}\n")),(0,n.kt)("p",null,"Then, we make a function to use the operator easily:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs"},"public static partial class CustomEx\n{\n    public static IStream<TOut> CustomSelect<TIn, TOut>(this Stream<TIn> stream, string name, Func<TIn, TOut> selector)\n        => new CustomSelectStreamNode<TIn, TOut>(name, new CustomSelectArgs<TIn, TOut> { Stream = stream, Selector = selector }).Output;\n}\n")),(0,n.kt)("p",null,"Here is the full source code for the ",(0,n.kt)("inlineCode",{parentName:"p"},"CustomSelect")," operator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="CustomSelect.cs"',title:'"CustomSelect.cs"'},"using System;\nusing Paillave.Etl.Core;\nusing Paillave.Etl.Reactive.Operators;\n\nnamespace Demo\n{\n    public class CustomSelectArgs<TIn, TOut>\n    {\n        public Stream<TIn> Stream { get; set; }\n        public Func<TIn, TOut> Selector { get; set; }\n    }\n    public class CustomSelectStreamNode<TIn, TOut>\n        : StreamNodeBase<TOut, IStream<TOut>, CustomSelectArgs<TIn, TOut>>\n    {\n        public CustomSelectStreamNode(string name, CustomSelectArgs<TIn, TOut> args)\n            : base(name, args) { }\n        public override ProcessImpact PerformanceImpact => ProcessImpact.Light;\n        public override ProcessImpact MemoryFootPrint => ProcessImpact.Light;\n        protected override IStream<TOut> CreateOutputStream(CustomSelectArgs<TIn, TOut> args)\n            => base.CreateUnsortedStream(args.Stream.Observable.Map(args.Selector));\n    }\n    public static partial class CustomEx\n    {\n        public static IStream<TOut> CustomSelect<TIn, TOut>(this Stream<TIn> stream, string name, Func<TIn, TOut> selector)\n            => new CustomSelectStreamNode<TIn, TOut>(name,\n                new CustomSelectArgs<TIn, TOut>\n                {\n                    Stream = stream,\n                    Selector = selector\n                }).Output;\n    }\n}\n")))}p.isMDXComponent=!0},1381:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/xamarin-extends-platforms-toolbox-devices-701403e865999aeca9df1b817adeb567.svg"}}]);