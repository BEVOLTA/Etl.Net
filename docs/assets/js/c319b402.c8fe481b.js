"use strict";(self.webpackChunketlnetdocumentation=self.webpackChunketlnetdocumentation||[]).push([[5619],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3562:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],s={sidebar_position:1},c="Backbone",l={unversionedId:"tutorials/backbone",id:"tutorials/backbone",isDocsHomePage:!1,title:"Backbone",description:"TrackCheck",source:"@site/docs/tutorials/1-backbone.md",sourceDirName:"tutorials",slug:"/tutorials/backbone",permalink:"/Etl.Net/docs/tutorials/backbone",editUrl:"https://paillave.github.io/Etl.Net/edit/master/website/docs/tutorials/1-backbone.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation & Execution",permalink:"/Etl.Net/docs/quickstart/installation"},next:{title:"ETL process",permalink:"/Etl.Net/docs/tutorials/defineProcess"}},u=[{value:"Create the project",id:"create-the-project",children:[]},{value:"Create an empty process",id:"create-an-empty-process",children:[]},{value:"Create the runner",id:"create-the-runner",children:[]},{value:"Trigger the runner",id:"trigger-the-runner",children:[]},{value:"Catch the success or failure of an execution",id:"catch-the-success-or-failure-of-an-execution",children:[]},{value:"Full source code at this stage",id:"full-source-code-at-this-stage",children:[]}],p={toc:u};function m(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"backbone"},"Backbone"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"TrackCheck",src:n(57730).Z})),(0,i.kt)("p",null,"This is a detailed step by step tutorial of a typical simple ETL process."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unzip files with the name pattern ",(0,i.kt)("inlineCode",{parentName:"li"},"*.zip")),(0,i.kt)("li",{parentName:"ul"},"Parse csv files with the name pattern ",(0,i.kt)("inlineCode",{parentName:"li"},"*.csv")," from zip files"),(0,i.kt)("li",{parentName:"ul"},"Feed a table ",(0,i.kt)("inlineCode",{parentName:"li"},"Person")," with the list of people from files"),(0,i.kt)("li",{parentName:"ul"},"Exclude duplicates"),(0,i.kt)("li",{parentName:"ul"},"Insert if the email is not found, update otherwise"),(0,i.kt)("li",{parentName:"ul"},"We won't use extensions for Entity Framework here but with extensions that directly deal with Sql Server")),(0,i.kt)("p",null,"Csv files in zip files have the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csv"},"email,first name,last name,date of birth,reputation\ntmp0@coucou.com,aze0,rty0,2000-05-10,45\ntmp1@coucou.com,aze1,rty1,2000-01-11,145\ntmp2@coucou.com,aze2,rty2,2000-02-12,245\ntmp3@coucou.com,aze3,rty3,2000-03-13,345\ntmp4@coucou.com,aze4,rty4,2000-04-14,445\n")),(0,i.kt)("p",null,"The target table is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"IF OBJECT_ID('[dbo].[Person]', 'U') IS NOT NULL\nDROP TABLE [dbo].[Person]\nGO\nCREATE TABLE [dbo].[Person]\n(\n    [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, -- Primary Key column\n    [Email] NVARCHAR(255) NOT NULL UNIQUE, -- Business Key column\n    [FirstName] NVARCHAR(50) NOT NULL,\n    [LastName] NVARCHAR(50) NOT NULL,\n    [DateOfBirth] DATE NOT NULL,\n    [Reputation] INT NULL\n);\nGO\n")),(0,i.kt)("h2",{id:"create-the-project"},"Create the project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet new console -o SimpleTutorial\ncd SimpleTutorial\n")),(0,i.kt)("p",null,"Add reference to ",(0,i.kt)("inlineCode",{parentName:"p"},"Etl.Net"),", the core of ETL.NET with all its common operators:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet add package Paillave.EtlNet.Core\n")),(0,i.kt)("h2",{id:"create-an-empty-process"},"Create an empty process"),(0,i.kt)("p",null,"First, create an empty ETL process definition."),(0,i.kt)("p",null,"This process definition is a method that must receive as a parameter a stream of a single element that is the transmitted value when the process is run. In our situation this value is a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," that represents the path where to find zip files."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"private static void DefineProcess(ISingleStream<string> contextStream)\n{\n    // TODO: Define the ETL process here\n}\n")),(0,i.kt)("h2",{id:"create-the-runner"},"Create the runner"),(0,i.kt)("p",null,"We will create a runner with ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamProcessRunner")," from the package ",(0,i.kt)("inlineCode",{parentName:"p"},"Paillave.EtlNet.ExecutionToolkit")," by providing the ETL process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var processRunner = StreamProcessRunner.Create<string>(DefineProcess);\n")),(0,i.kt)("h2",{id:"trigger-the-runner"},"Trigger the runner"),(0,i.kt)("p",null,"Once we have the runner, we can trigger it by providing the value of the single initial event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var processRunner = StreamProcessRunner.Create<string>(DefineProcess);\nvar res = await processRunner.ExecuteAsync(args[0]);\n")),(0,i.kt)("h2",{id:"catch-the-success-or-failure-of-an-execution"},"Catch the success or failure of an execution"),(0,i.kt)("p",null,"The execution returns an objects that gives information about the execution like the fact a failure occurred."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'Console.Write(res.Failed ? "Failed" : "Succeeded");\n')),(0,i.kt)("h2",{id:"full-source-code-at-this-stage"},"Full source code at this stage"),(0,i.kt)("p",null,"We now have the backbone of a console application that run an ETL process"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs",metastring:'title="Program.cs"',title:'"Program.cs"'},'using System;\nusing System.Threading.Tasks;\nusing Paillave.Etl.Core;\n\nnamespace SimpleTutorial\n{\n    class Program\n    {\n        static async Task Main(string[] args)\n        {\n            var processRunner = StreamProcessRunner.Create<string>(DefineProcess);\n            var res = await processRunner.ExecuteAsync(args[0]);\n            Console.Write(res.Failed ? "Failed" : "Succeeded");\n        }\n        private static void DefineProcess(ISingleStream<string> contextStream)\n        {\n            // TODO: Define the ETL process here\n        }\n    }\n}\n')))}m.isMDXComponent=!0},57730:function(e,t,n){t.Z=n.p+"assets/images/azure-app-service-platform-bot-construction-f4ffa4b54a016bd8e249c00e7dc8cdd5.svg"}}]);