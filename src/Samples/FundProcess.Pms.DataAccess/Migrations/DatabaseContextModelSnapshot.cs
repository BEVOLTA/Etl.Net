// <auto-generated />
using System;
using System.Globalization;
using FundProcess.Pms.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FundProcess.Pms.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("BelongsToEntityGroupId");

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(512);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<int?>("EntityGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EntityGroupId");

                    b.ToTable("EntityBase","Entity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EntityBase");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EntityGroup","Entity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Investor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<int>("EntityId");

                    b.Property<int?>("IntermediaryId");

                    b.Property<int?>("InternalResponsibleId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("IntermediaryId");

                    b.HasIndex("InternalResponsibleId");

                    b.ToTable("Investor","Entity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.InvestorRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("InvestorRelationship","Entity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.InvestorRelationshipItem", b =>
                {
                    b.Property<int>("InvestorId");

                    b.Property<int>("InvestorRelationshipId");

                    b.Property<int?>("BelongsToEntityId");

                    b.HasKey("InvestorId", "InvestorRelationshipId");

                    b.HasIndex("InvestorRelationshipId");

                    b.ToTable("InvestorRelationshipItem","Entity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.PersonToCompany", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("PersonId");

                    b.Property<int?>("BelongsToEntityId");

                    b.HasKey("CompanyId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonToCompany","Entity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.AumThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AnnualRate");

                    b.Property<decimal>("AumFromIncluded");

                    b.Property<decimal>("AumToExcluded");

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<int>("FeeId");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("AumThreshold","Fee");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AumAssetPart");

                    b.Property<decimal>("AumSicav");

                    b.Property<decimal>("AumSubFund");

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("FeeAmount");

                    b.Property<decimal?>("FeeAmountVatIncluded");

                    b.Property<int?>("FeeDefinitionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("FeeDefinitionId", "Date");

                    b.ToTable("Fee","Fee");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.FeeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AnnualRate");

                    b.Property<int>("AssetPart");

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<int>("FeeType");

                    b.Property<bool>("IncludeCashInAum");

                    b.Property<bool>("IsVatApplicable");

                    b.Property<int?>("ManCoSecuritiesId");

                    b.Property<int>("PaymentFrequency");

                    b.Property<int?>("PortfolioId");

                    b.Property<int?>("RegisterAccountId");

                    b.Property<int?>("ShareClassId");

                    b.Property<int?>("SicavId");

                    b.Property<int>("ThirdPartyId");

                    b.Property<DateTime?>("ValidityFrom");

                    b.Property<DateTime?>("ValidityTo");

                    b.Property<bool?>("VatValue");

                    b.HasKey("Id");

                    b.HasIndex("ManCoSecuritiesId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("RegisterAccountId");

                    b.HasIndex("ShareClassId");

                    b.HasIndex("SicavId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("FeeDefinition","Fee");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.DataProviderSecurity", b =>
                {
                    b.Property<int>("SecurityId");

                    b.Property<string>("DataProvider")
                        .HasMaxLength(50);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SecurityId", "DataProvider", "BelongsToEntityId");

                    b.ToTable("DataProviderSecurity","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.HistoricalValue", b =>
                {
                    b.Property<DateTime>("Date");

                    b.Property<int>("SecurityId");

                    b.Property<string>("Type")
                        .HasMaxLength(3);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<decimal>("Value");

                    b.HasKey("Date", "SecurityId", "Type", "BelongsToEntityId");

                    b.HasIndex("SecurityId");

                    b.ToTable("HistoricalValue","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.PortfolioComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId")
                        .IsRequired();

                    b.Property<DateTime?>("Date")
                        .IsRequired();

                    b.Property<int>("PortfolioId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Date", "PortfolioId", "BelongsToEntityId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioComposition","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<decimal>("MarketValueInPortfolioCcy");

                    b.Property<decimal?>("MarketValueInSecurityCcy");

                    b.Property<int>("PortfolioCompositionId");

                    b.Property<int>("SecurityId");

                    b.Property<decimal>("Value");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.HasIndex("PortfolioCompositionId", "SecurityId", "BelongsToEntityId");

                    b.ToTable("Position","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.RegisterAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("DealerTaCode")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("DistributorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Number");

                    b.Property<int>("ShareHolderId");

                    b.Property<string>("SortName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("ShareHolderId");

                    b.ToTable("RegisterAccount","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId")
                        .IsRequired();

                    b.Property<int?>("BenchmarkId");

                    b.Property<string>("ClassificationStrategy");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CurrencyIso")
                        .HasMaxLength(3);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("GicsSectorId");

                    b.Property<int?>("IcbSectorId");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Isin")
                        .HasMaxLength(12);

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("MarketPlaceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("PricingFrequency");

                    b.HasKey("Id");

                    b.HasAlternateKey("BelongsToEntityId", "InternalCode");

                    b.HasIndex("BenchmarkId");

                    b.ToTable("Security","Pms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Security");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("SecurityGroup","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityGroupItem", b =>
                {
                    b.Property<int>("SecurityId");

                    b.Property<int>("SecurityGroupId");

                    b.Property<int?>("BelongsToEntityId");

                    b.HasKey("SecurityId", "SecurityGroupId");

                    b.HasIndex("SecurityGroupId");

                    b.ToTable("SecurityGroupItem","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("DealDescription")
                        .IsRequired();

                    b.Property<decimal>("FeesInSecurityCcy");

                    b.Property<decimal>("GrossAmountInSecurityCcy");

                    b.Property<DateTime>("NavDate");

                    b.Property<decimal>("NetAmountInFundCcy");

                    b.Property<decimal>("NetAmountInSecurityCcy");

                    b.Property<int>("PortfolioId");

                    b.Property<decimal>("PriceInFundCcy");

                    b.Property<decimal>("PriceInSecurityCcy");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SecurityId");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TotalGainLoss");

                    b.Property<DateTime>("TradeDate");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("ValueDate");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("SecurityId");

                    b.ToTable("SecurityTransaction","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Sicav", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(50);

                    b.Property<string>("LegalStructure");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("ProspectusId");

                    b.HasKey("Id");

                    b.HasIndex("BelongsToEntityId");

                    b.ToTable("Sicav","Pms");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.UserEntityRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("ApplicationRole")
                        .HasMaxLength(50);

                    b.Property<int?>("BelongsToEntityId");

                    b.HasKey("UserId", "CompanyId", "ApplicationRole");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserEntityRole","UserAccounts");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BelongsToEntityId");

                    b.Property<string>("IdentityProvider")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","UserAccounts");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Company", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase");

                    b.Property<int?>("ContactId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.Property<decimal?>("VAT");

                    b.HasIndex("ContactId");

                    b.ToTable("Company");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IdCardNumber")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50);

                    b.ToTable("Person");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Bond", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security");

                    b.Property<decimal?>("CouponRate");

                    b.Property<string>("CouponType")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<decimal?>("FaceValue");

                    b.Property<DateTime?>("FirstPaymentDate");

                    b.Property<bool?>("IsPerpetual");

                    b.Property<decimal?>("IssueAmount");

                    b.Property<DateTime?>("MaturityDate");

                    b.Property<DateTime?>("NextCouponDate");

                    b.Property<decimal?>("Notional");

                    b.Property<int?>("PaymentFrequency");

                    b.ToTable("Bond");

                    b.HasDiscriminator().HasValue("Bond");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Derivative", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security");

                    b.Property<decimal?>("ContractSize");

                    b.Property<int?>("CounterpartyId");

                    b.Property<bool?>("IsOtc");

                    b.Property<decimal?>("StrikePrice");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("Derivative");

                    b.HasDiscriminator().HasValue("Derivative");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Equity", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security");


                    b.ToTable("Equity");

                    b.HasDiscriminator().HasValue("Equity");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.ShareClass", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security");

                    b.Property<DateTime?>("ClosingDate");

                    b.Property<string>("DistributionType")
                        .HasMaxLength(50);

                    b.Property<int?>("DividendPeriodicity");

                    b.Property<decimal?>("EntryFee");

                    b.Property<decimal?>("ExitFee");

                    b.Property<DateTime?>("InceptionDate");

                    b.Property<int?>("InvestorType");

                    b.Property<bool>("IsOpenForInvestment");

                    b.Property<bool>("IsPrimary");

                    b.Property<decimal?>("ManagementFee");

                    b.Property<decimal?>("MinimumInvestment");

                    b.Property<decimal?>("PerformanceFee");

                    b.Property<int>("SubFundId");

                    b.HasIndex("SubFundId");

                    b.ToTable("ShareClass");

                    b.HasDiscriminator().HasValue("ShareClass");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SubFund", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security");

                    b.Property<bool?>("ClosedEnded");

                    b.Property<int?>("CustodianId");

                    b.Property<string>("DomicileIso")
                        .HasMaxLength(2);

                    b.Property<int?>("FundAdminId");

                    b.Property<int?>("InvestmentProcess");

                    b.Property<bool?>("IsLiquidated");

                    b.Property<bool?>("Leverage");

                    b.Property<DateTime?>("LiquidationDate");

                    b.Property<int?>("NavFrequency");

                    b.Property<decimal?>("RecommendedTimeHorizon");

                    b.Property<int?>("SettlementNbDays");

                    b.Property<bool?>("ShortExposure");

                    b.Property<int?>("SicavId");

                    b.Property<int?>("SubscriptionContactId");

                    b.Property<int?>("TransferAgentId");

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.HasIndex("CustodianId");

                    b.HasIndex("FundAdminId");

                    b.HasIndex("SicavId");

                    b.HasIndex("SubscriptionContactId");

                    b.HasIndex("TransferAgentId");

                    b.ToTable("SubFund");

                    b.HasDiscriminator().HasValue("SubFund");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Company");

                    b.Property<bool?>("CssfEquivalentSupervision");

                    b.Property<bool?>("Regulated");

                    b.Property<int>("Type");

                    b.ToTable("FinancialInstitution");

                    b.HasDiscriminator().HasValue("FinancialInstitution");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.User", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasDefaultValue("en-GB");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.ManCo", b =>
                {
                    b.HasBaseType("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution");

                    b.Property<bool>("Aifm");

                    b.Property<bool>("CollectiveManagement");

                    b.Property<bool>("DiscretionaryManagement");

                    b.ToTable("ManCo");

                    b.HasDiscriminator().HasValue("ManCo");
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityGroup", "Group")
                        .WithMany()
                        .HasForeignKey("EntityGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Investor", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase", "Intermediary")
                        .WithMany()
                        .HasForeignKey("IntermediaryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person", "InternalResponsible")
                        .WithMany()
                        .HasForeignKey("InternalResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.InvestorRelationshipItem", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Investor", "Investor")
                        .WithMany("Relationships")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.InvestorRelationship", "InvestorRelationship")
                        .WithMany("Investors")
                        .HasForeignKey("InvestorRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.PersonToCompany", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Company", "Company")
                        .WithMany("People")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person", "Person")
                        .WithMany("Companies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.AumThreshold", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.Fee", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.FeeDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("FeeDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Fee.Tables.FeeDefinition", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityGroup", "ManCoSecurities")
                        .WithMany()
                        .HasForeignKey("ManCoSecuritiesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Portfolio")
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.RegisterAccount", "RegisterAccount")
                        .WithMany()
                        .HasForeignKey("RegisterAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.ShareClass", "ShareClass")
                        .WithMany()
                        .HasForeignKey("ShareClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Sicav", "Sicav")
                        .WithMany()
                        .HasForeignKey("SicavId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.EntityBase", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.HistoricalValue", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.PortfolioComposition", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Portfolio")
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Position", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.PortfolioComposition", "PortfolioComposition")
                        .WithMany()
                        .HasForeignKey("PortfolioCompositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.RegisterAccount", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Investor", "ShareHolder")
                        .WithMany()
                        .HasForeignKey("ShareHolderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Benchmark")
                        .WithMany()
                        .HasForeignKey("BenchmarkId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityGroupItem", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityGroup", "SecurityGroup")
                        .WithMany()
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Security")
                        .WithMany("Groups")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SecurityTransaction", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Portfolio")
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Sicav", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.ManCo", "ManCo")
                        .WithMany()
                        .HasForeignKey("BelongsToEntityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.UserEntityRole", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.UserLogin", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.UserAccounts.Tables.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Company", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Derivative", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.ShareClass", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SubFund", "SubFund")
                        .WithMany()
                        .HasForeignKey("SubFundId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.SubFund", b =>
                {
                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", "Custodian")
                        .WithMany()
                        .HasForeignKey("CustodianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", "FundAdmin")
                        .WithMany()
                        .HasForeignKey("FundAdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Pms.Tables.Sicav", "Sicav")
                        .WithMany()
                        .HasForeignKey("SicavId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.Person", "SubscriptionContact")
                        .WithMany()
                        .HasForeignKey("SubscriptionContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FundProcess.Pms.DataAccess.Schemas.Entity.Tables.FinancialInstitution", "TransferAgent")
                        .WithMany()
                        .HasForeignKey("TransferAgentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
