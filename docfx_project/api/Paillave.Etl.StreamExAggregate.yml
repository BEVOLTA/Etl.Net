### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.StreamExAggregate
  commentId: T:Paillave.Etl.StreamExAggregate
  id: StreamExAggregate
  parent: Paillave.Etl
  children:
  - Paillave.Etl.StreamExAggregate.Aggregate``3(ISortedStream{``0,``2},System.String,System.Func{``0,``1},System.Func{``1,``0,``1})
  - Paillave.Etl.StreamExAggregate.Aggregate``3(IStream{``0},System.String,System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``0,``1})
  langs:
  - csharp
  - vb
  name: StreamExAggregate
  nameWithType: StreamExAggregate
  fullName: Paillave.Etl.StreamExAggregate
  type: Class
  source:
    id: StreamExAggregate
    path: ''
    startLine: 18
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static class StreamExAggregate
    content.vb: Public Module StreamExAggregate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.StreamExAggregate.Aggregate``3(IStream{``0},System.String,System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``0,``1})
  commentId: M:Paillave.Etl.StreamExAggregate.Aggregate``3(IStream{``0},System.String,System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``0,``1})
  id: Aggregate``3(IStream{``0},System.String,System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExAggregate
  langs:
  - csharp
  - vb
  name: Aggregate<TIn, TAggr, TKey>(IStream<TIn>, String, Func<TIn, TAggr>, Func<TIn, TKey>, Func<TAggr, TIn, TAggr>)
  nameWithType: StreamExAggregate.Aggregate<TIn, TAggr, TKey>(IStream<TIn>, String, Func<TIn, TAggr>, Func<TIn, TKey>, Func<TAggr, TIn, TAggr>)
  fullName: Paillave.Etl.StreamExAggregate.Aggregate<TIn, TAggr, TKey>(IStream<TIn>, System.String, System.Func<TIn, TAggr>, System.Func<TIn, TKey>, System.Func<TAggr, TIn, TAggr>)
  type: Method
  source:
    id: Aggregate
    path: ''
    startLine: 20
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<AggregationResult<TIn, TKey, TAggr>> Aggregate<TIn, TAggr, TKey>(this IStream<TIn> stream, string name, Func<TIn, TAggr> emptyAggregation, Func<TIn, TKey> getKey, Func<TAggr, TIn, TAggr> aggregate)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: emptyAggregation
      type: System.Func{{TIn},{TAggr}}
    - id: getKey
      type: System.Func{{TIn},{TKey}}
    - id: aggregate
      type: System.Func{{TAggr},{TIn},{TAggr}}
    typeParameters:
    - id: TIn
    - id: TAggr
    - id: TKey
    return:
      type: IStream{AggregationResult{{TIn},{TKey},{TAggr}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TIn, TAggr, TKey)(stream As IStream(Of TIn), name As String, emptyAggregation As Func(Of TIn, TAggr), getKey As Func(Of TIn, TKey), aggregate As Func(Of TAggr, TIn, TAggr)) As IStream(Of AggregationResult(Of TIn, TKey, TAggr))
  overload: Paillave.Etl.StreamExAggregate.Aggregate*
  nameWithType.vb: StreamExAggregate.Aggregate(Of TIn, TAggr, TKey)(IStream(Of TIn), String, Func(Of TIn, TAggr), Func(Of TIn, TKey), Func(Of TAggr, TIn, TAggr))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExAggregate.Aggregate(Of TIn, TAggr, TKey)(IStream(Of TIn), System.String, System.Func(Of TIn, TAggr), System.Func(Of TIn, TKey), System.Func(Of TAggr, TIn, TAggr))
  name.vb: Aggregate(Of TIn, TAggr, TKey)(IStream(Of TIn), String, Func(Of TIn, TAggr), Func(Of TIn, TKey), Func(Of TAggr, TIn, TAggr))
- uid: Paillave.Etl.StreamExAggregate.Aggregate``3(ISortedStream{``0,``2},System.String,System.Func{``0,``1},System.Func{``1,``0,``1})
  commentId: M:Paillave.Etl.StreamExAggregate.Aggregate``3(ISortedStream{``0,``2},System.String,System.Func{``0,``1},System.Func{``1,``0,``1})
  id: Aggregate``3(ISortedStream{``0,``2},System.String,System.Func{``0,``1},System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExAggregate
  langs:
  - csharp
  - vb
  name: Aggregate<TIn, TAggr, TKey>(ISortedStream<TIn, TKey>, String, Func<TIn, TAggr>, Func<TAggr, TIn, TAggr>)
  nameWithType: StreamExAggregate.Aggregate<TIn, TAggr, TKey>(ISortedStream<TIn, TKey>, String, Func<TIn, TAggr>, Func<TAggr, TIn, TAggr>)
  fullName: Paillave.Etl.StreamExAggregate.Aggregate<TIn, TAggr, TKey>(ISortedStream<TIn, TKey>, System.String, System.Func<TIn, TAggr>, System.Func<TAggr, TIn, TAggr>)
  type: Method
  source:
    id: Aggregate
    path: ''
    startLine: 30
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static ISortedStream<AggregationResult<TIn, TKey, TAggr>, TKey> Aggregate<TIn, TAggr, TKey>(this ISortedStream<TIn, TKey> stream, string name, Func<TIn, TAggr> emptyAggregation, Func<TAggr, TIn, TAggr> aggregate)
    parameters:
    - id: stream
      type: ISortedStream{{TIn},{TKey}}
    - id: name
      type: System.String
    - id: emptyAggregation
      type: System.Func{{TIn},{TAggr}}
    - id: aggregate
      type: System.Func{{TAggr},{TIn},{TAggr}}
    typeParameters:
    - id: TIn
    - id: TAggr
    - id: TKey
    return:
      type: ISortedStream{AggregationResult{{TIn},{TKey},{TAggr}},{TKey}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TIn, TAggr, TKey)(stream As ISortedStream(Of TIn, TKey), name As String, emptyAggregation As Func(Of TIn, TAggr), aggregate As Func(Of TAggr, TIn, TAggr)) As ISortedStream(Of AggregationResult(Of TIn, TKey, TAggr), TKey)
  overload: Paillave.Etl.StreamExAggregate.Aggregate*
  nameWithType.vb: StreamExAggregate.Aggregate(Of TIn, TAggr, TKey)(ISortedStream(Of TIn, TKey), String, Func(Of TIn, TAggr), Func(Of TAggr, TIn, TAggr))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExAggregate.Aggregate(Of TIn, TAggr, TKey)(ISortedStream(Of TIn, TKey), System.String, System.Func(Of TIn, TAggr), System.Func(Of TAggr, TIn, TAggr))
  name.vb: Aggregate(Of TIn, TAggr, TKey)(ISortedStream(Of TIn, TKey), String, Func(Of TIn, TAggr), Func(Of TAggr, TIn, TAggr))
references:
- uid: Paillave.Etl
  commentId: N:Paillave.Etl
  name: Paillave.Etl
  nameWithType: Paillave.Etl
  fullName: Paillave.Etl
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.StreamExAggregate.Aggregate*
  commentId: Overload:Paillave.Etl.StreamExAggregate.Aggregate
  name: Aggregate
  nameWithType: StreamExAggregate.Aggregate
  fullName: Paillave.Etl.StreamExAggregate.Aggregate
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{{TIn},{TAggr}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TIn, TAggr>
  nameWithType: Func<TIn, TAggr>
  fullName: System.Func<TIn, TAggr>
  nameWithType.vb: Func(Of TIn, TAggr)
  fullName.vb: System.Func(Of TIn, TAggr)
  name.vb: Func(Of TIn, TAggr)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TKey}}
  commentId: T:System.Func{``0,``2}
  parent: System
  definition: System.Func`2
  name: Func<TIn, TKey>
  nameWithType: Func<TIn, TKey>
  fullName: System.Func<TIn, TKey>
  nameWithType.vb: Func(Of TIn, TKey)
  fullName.vb: System.Func(Of TIn, TKey)
  name.vb: Func(Of TIn, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TAggr},{TIn},{TAggr}}
  commentId: T:System.Func{``1,``0,``1}
  parent: System
  definition: System.Func`3
  name: Func<TAggr, TIn, TAggr>
  nameWithType: Func<TAggr, TIn, TAggr>
  fullName: System.Func<TAggr, TIn, TAggr>
  nameWithType.vb: Func(Of TAggr, TIn, TAggr)
  fullName.vb: System.Func(Of TAggr, TIn, TAggr)
  name.vb: Func(Of TAggr, TIn, TAggr)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{AggregationResult{{TIn},{TKey},{TAggr}}}
  commentId: '!:IStream{AggregationResult{``0,``2,``1}}'
  definition: IStream`1
  name: IStream<AggregationResult<TIn, TKey, TAggr>>
  nameWithType: IStream<AggregationResult<TIn, TKey, TAggr>>
  fullName: IStream<AggregationResult<TIn, TKey, TAggr>>
  nameWithType.vb: IStream(Of AggregationResult(Of TIn, TKey, TAggr))
  fullName.vb: IStream(Of AggregationResult(Of TIn, TKey, TAggr))
  name.vb: IStream(Of AggregationResult(Of TIn, TKey, TAggr))
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AggregationResult`3
    name: AggregationResult
    nameWithType: AggregationResult
    fullName: AggregationResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AggregationResult`3
    name: AggregationResult
    nameWithType: AggregationResult
    fullName: AggregationResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: ISortedStream{{TIn},{TKey}}
  commentId: '!:ISortedStream{``0,``2}'
  definition: ISortedStream`2
  name: ISortedStream<TIn, TKey>
  nameWithType: ISortedStream<TIn, TKey>
  fullName: ISortedStream<TIn, TKey>
  nameWithType.vb: ISortedStream(Of TIn, TKey)
  fullName.vb: ISortedStream(Of TIn, TKey)
  name.vb: ISortedStream(Of TIn, TKey)
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ISortedStream{AggregationResult{{TIn},{TKey},{TAggr}},{TKey}}
  commentId: '!:ISortedStream{AggregationResult{``0,``2,``1},``2}'
  definition: ISortedStream`2
  name: ISortedStream<AggregationResult<TIn, TKey, TAggr>, TKey>
  nameWithType: ISortedStream<AggregationResult<TIn, TKey, TAggr>, TKey>
  fullName: ISortedStream<AggregationResult<TIn, TKey, TAggr>, TKey>
  nameWithType.vb: ISortedStream(Of AggregationResult(Of TIn, TKey, TAggr), TKey)
  fullName.vb: ISortedStream(Of AggregationResult(Of TIn, TKey, TAggr), TKey)
  name.vb: ISortedStream(Of AggregationResult(Of TIn, TKey, TAggr), TKey)
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: AggregationResult`3
    name: AggregationResult
    nameWithType: AggregationResult
    fullName: AggregationResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: AggregationResult`3
    name: AggregationResult
    nameWithType: AggregationResult
    fullName: AggregationResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAggr
    nameWithType: TAggr
    fullName: TAggr
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ISortedStream`2
  isExternal: true
  name: ISortedStream<, >
  nameWithType: ISortedStream<, >
  fullName: ISortedStream<, >
  nameWithType.vb: ISortedStream(Of , )
  fullName.vb: ISortedStream(Of , )
  name.vb: ISortedStream(Of , )
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
