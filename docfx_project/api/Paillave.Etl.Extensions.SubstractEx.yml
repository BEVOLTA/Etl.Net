### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.Extensions.SubstractEx
  commentId: T:Paillave.Etl.Extensions.SubstractEx
  id: SubstractEx
  parent: Paillave.Etl.Extensions
  children:
  - Paillave.Etl.Extensions.SubstractEx.Substract``3(ISortedStream{``0,``2},System.String,ISortedStream{``1,``2})
  - Paillave.Etl.Extensions.SubstractEx.Substract``4(``0,System.String,IStream{``2},System.Func{``1,``3},System.Func{``2,``3})
  langs:
  - csharp
  - vb
  name: SubstractEx
  nameWithType: SubstractEx
  fullName: Paillave.Etl.Extensions.SubstractEx
  type: Class
  source:
    id: SubstractEx
    path: ''
    startLine: 1206
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static class SubstractEx
    content.vb: Public Module SubstractEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.Extensions.SubstractEx.Substract``3(ISortedStream{``0,``2},System.String,ISortedStream{``1,``2})
  commentId: M:Paillave.Etl.Extensions.SubstractEx.Substract``3(ISortedStream{``0,``2},System.String,ISortedStream{``1,``2})
  id: Substract``3(ISortedStream{``0,``2},System.String,ISortedStream{``1,``2})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SubstractEx
  langs:
  - csharp
  - vb
  name: Substract<TInLeft, TInRight, TKey>(ISortedStream<TInLeft, TKey>, String, ISortedStream<TInRight, TKey>)
  nameWithType: SubstractEx.Substract<TInLeft, TInRight, TKey>(ISortedStream<TInLeft, TKey>, String, ISortedStream<TInRight, TKey>)
  fullName: Paillave.Etl.Extensions.SubstractEx.Substract<TInLeft, TInRight, TKey>(ISortedStream<TInLeft, TKey>, System.String, ISortedStream<TInRight, TKey>)
  type: Method
  source:
    id: Substract
    path: ''
    startLine: 1208
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TInLeft> Substract<TInLeft, TInRight, TKey>(this ISortedStream<TInLeft, TKey> leftStream, string name, ISortedStream<TInRight, TKey> rightStream)
    parameters:
    - id: leftStream
      type: ISortedStream{{TInLeft},{TKey}}
    - id: name
      type: System.String
    - id: rightStream
      type: ISortedStream{{TInRight},{TKey}}
    typeParameters:
    - id: TInLeft
    - id: TInRight
    - id: TKey
    return:
      type: IStream{{TInLeft}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Substract(Of TInLeft, TInRight, TKey)(leftStream As ISortedStream(Of TInLeft, TKey), name As String, rightStream As ISortedStream(Of TInRight, TKey)) As IStream(Of TInLeft)
  overload: Paillave.Etl.Extensions.SubstractEx.Substract*
  nameWithType.vb: SubstractEx.Substract(Of TInLeft, TInRight, TKey)(ISortedStream(Of TInLeft, TKey), String, ISortedStream(Of TInRight, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SubstractEx.Substract(Of TInLeft, TInRight, TKey)(ISortedStream(Of TInLeft, TKey), System.String, ISortedStream(Of TInRight, TKey))
  name.vb: Substract(Of TInLeft, TInRight, TKey)(ISortedStream(Of TInLeft, TKey), String, ISortedStream(Of TInRight, TKey))
- uid: Paillave.Etl.Extensions.SubstractEx.Substract``4(``0,System.String,IStream{``2},System.Func{``1,``3},System.Func{``2,``3})
  commentId: M:Paillave.Etl.Extensions.SubstractEx.Substract``4(``0,System.String,IStream{``2},System.Func{``1,``3},System.Func{``2,``3})
  id: Substract``4(``0,System.String,IStream{``2},System.Func{``1,``3},System.Func{``2,``3})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SubstractEx
  langs:
  - csharp
  - vb
  name: Substract<TStream, TInLeft, TInRight, TKey>(TStream, String, IStream<TInRight>, Func<TInLeft, TKey>, Func<TInRight, TKey>)
  nameWithType: SubstractEx.Substract<TStream, TInLeft, TInRight, TKey>(TStream, String, IStream<TInRight>, Func<TInLeft, TKey>, Func<TInRight, TKey>)
  fullName: Paillave.Etl.Extensions.SubstractEx.Substract<TStream, TInLeft, TInRight, TKey>(TStream, System.String, IStream<TInRight>, System.Func<TInLeft, TKey>, System.Func<TInRight, TKey>)
  type: Method
  source:
    id: Substract
    path: ''
    startLine: 1217
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: >-
      public static TStream Substract<TStream, TInLeft, TInRight, TKey>(this TStream leftStream, string name, IStream<TInRight> rightStream, Func<TInLeft, TKey> getLeftKey, Func<TInRight, TKey> getRightKey)
          where TStream : IStream<TInLeft>
    parameters:
    - id: leftStream
      type: '{TStream}'
    - id: name
      type: System.String
    - id: rightStream
      type: IStream{{TInRight}}
    - id: getLeftKey
      type: System.Func{{TInLeft},{TKey}}
    - id: getRightKey
      type: System.Func{{TInRight},{TKey}}
    typeParameters:
    - id: TStream
    - id: TInLeft
    - id: TInRight
    - id: TKey
    return:
      type: '{TStream}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Substract(Of TStream As IStream(Of TInLeft), TInLeft, TInRight, TKey)(leftStream As TStream, name As String, rightStream As IStream(Of TInRight), getLeftKey As Func(Of TInLeft, TKey), getRightKey As Func(Of TInRight, TKey)) As TStream
  overload: Paillave.Etl.Extensions.SubstractEx.Substract*
  nameWithType.vb: SubstractEx.Substract(Of TStream, TInLeft, TInRight, TKey)(TStream, String, IStream(Of TInRight), Func(Of TInLeft, TKey), Func(Of TInRight, TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SubstractEx.Substract(Of TStream, TInLeft, TInRight, TKey)(TStream, System.String, IStream(Of TInRight), System.Func(Of TInLeft, TKey), System.Func(Of TInRight, TKey))
  name.vb: Substract(Of TStream, TInLeft, TInRight, TKey)(TStream, String, IStream(Of TInRight), Func(Of TInLeft, TKey), Func(Of TInRight, TKey))
references:
- uid: Paillave.Etl.Extensions
  commentId: N:Paillave.Etl.Extensions
  name: Paillave.Etl.Extensions
  nameWithType: Paillave.Etl.Extensions
  fullName: Paillave.Etl.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.Extensions.SubstractEx.Substract*
  commentId: Overload:Paillave.Etl.Extensions.SubstractEx.Substract
  name: Substract
  nameWithType: SubstractEx.Substract
  fullName: Paillave.Etl.Extensions.SubstractEx.Substract
- uid: ISortedStream{{TInLeft},{TKey}}
  commentId: '!:ISortedStream{``0,``3}'
  definition: ISortedStream`2
  name: ISortedStream<TInLeft, TKey>
  nameWithType: ISortedStream<TInLeft, TKey>
  fullName: ISortedStream<TInLeft, TKey>
  nameWithType.vb: ISortedStream(Of TInLeft, TKey)
  fullName.vb: ISortedStream(Of TInLeft, TKey)
  name.vb: ISortedStream(Of TInLeft, TKey)
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ISortedStream{{TInRight},{TKey}}
  commentId: '!:ISortedStream{``1,``2}'
  definition: ISortedStream`2
  name: ISortedStream<TInRight, TKey>
  nameWithType: ISortedStream<TInRight, TKey>
  fullName: ISortedStream<TInRight, TKey>
  nameWithType.vb: ISortedStream(Of TInRight, TKey)
  fullName.vb: ISortedStream(Of TInRight, TKey)
  name.vb: ISortedStream(Of TInRight, TKey)
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TInLeft}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TInLeft>
  nameWithType: IStream<TInLeft>
  fullName: IStream<TInLeft>
  nameWithType.vb: IStream(Of TInLeft)
  fullName.vb: IStream(Of TInLeft)
  name.vb: IStream(Of TInLeft)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: ISortedStream`2
  isExternal: true
  name: ISortedStream<, >
  nameWithType: ISortedStream<, >
  fullName: ISortedStream<, >
  nameWithType.vb: ISortedStream(Of , )
  fullName.vb: ISortedStream(Of , )
  name.vb: ISortedStream(Of , )
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TStream}'
  commentId: '!:TStream'
  definition: TStream
  name: TStream
  nameWithType: TStream
  fullName: TStream
- uid: IStream{{TInRight}}
  commentId: '!:IStream{``1}'
  definition: IStream`1
  name: IStream<TInRight>
  nameWithType: IStream<TInRight>
  fullName: IStream<TInRight>
  nameWithType.vb: IStream(Of TInRight)
  fullName.vb: IStream(Of TInRight)
  name.vb: IStream(Of TInRight)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInLeft},{TKey}}
  commentId: T:System.Func{``0,``3}
  parent: System
  definition: System.Func`2
  name: Func<TInLeft, TKey>
  nameWithType: Func<TInLeft, TKey>
  fullName: System.Func<TInLeft, TKey>
  nameWithType.vb: Func(Of TInLeft, TKey)
  fullName.vb: System.Func(Of TInLeft, TKey)
  name.vb: Func(Of TInLeft, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInRight},{TKey}}
  commentId: T:System.Func{``1,``3}
  parent: System
  definition: System.Func`2
  name: Func<TInRight, TKey>
  nameWithType: Func<TInRight, TKey>
  fullName: System.Func<TInRight, TKey>
  nameWithType.vb: Func(Of TInRight, TKey)
  fullName.vb: System.Func(Of TInRight, TKey)
  name.vb: Func(Of TInRight, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TStream
  name: TStream
  nameWithType: TStream
  fullName: TStream
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
