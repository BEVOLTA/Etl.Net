### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.Extensions.SelectSectionEx
  commentId: T:Paillave.Etl.Extensions.SelectSectionEx
  id: SelectSectionEx
  parent: Paillave.Etl.Extensions
  children:
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  - Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  langs:
  - csharp
  - vb
  name: SelectSectionEx
  nameWithType: SelectSectionEx
  fullName: Paillave.Etl.Extensions.SelectSectionEx
  type: Class
  source:
    id: SelectSectionEx
    path: ''
    startLine: 884
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static class SelectSectionEx
    content.vb: Public Module SelectSectionEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior})
  id: SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>)
  nameWithType: SelectSectionEx.SelectSection<TIn>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn>(IStream<TIn>, System.String, KeepingState, System.Func<TIn, SwitchBehavior>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 886
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TIn> SelectSection<TIn>(this IStream<TIn> stream, string name, KeepingState initialState, Func<TIn, SwitchBehavior> switcher)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: initialState
      type: KeepingState
    - id: switcher
      type: System.Func{{TIn},SwitchBehavior}
    typeParameters:
    - id: TIn
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn)(stream As IStream(Of TIn), name As String, initialState As KeepingState, switcher As Func(Of TIn, SwitchBehavior)) As IStream(Of TIn)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), System.String, KeepingState, System.Func(Of TIn, SwitchBehavior))
  name.vb: SelectSection(Of TIn)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior})
  id: SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn>(IStream<TIn>, String, Func<TIn, SwitchBehavior>)
  nameWithType: SelectSectionEx.SelectSection<TIn>(IStream<TIn>, String, Func<TIn, SwitchBehavior>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn>(IStream<TIn>, System.String, System.Func<TIn, SwitchBehavior>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 895
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TIn> SelectSection<TIn>(this IStream<TIn> stream, string name, Func<TIn, SwitchBehavior> switcher)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: switcher
      type: System.Func{{TIn},SwitchBehavior}
    typeParameters:
    - id: TIn
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn)(stream As IStream(Of TIn), name As String, switcher As Func(Of TIn, SwitchBehavior)) As IStream(Of TIn)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), System.String, System.Func(Of TIn, SwitchBehavior))
  name.vb: SelectSection(Of TIn)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  id: SelectSection``1(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>)
  nameWithType: SelectSectionEx.SelectSection<TIn>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn>(IStream<TIn>, System.String, KeepingState, System.Func<TIn, SwitchBehavior>, System.Func<TIn, SwitchBehavior>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 903
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TIn> SelectSection<TIn>(this IStream<TIn> stream, string name, KeepingState initialState, Func<TIn, SwitchBehavior> switchToKeep, Func<TIn, SwitchBehavior> switchToIgnore)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: initialState
      type: KeepingState
    - id: switchToKeep
      type: System.Func{{TIn},SwitchBehavior}
    - id: switchToIgnore
      type: System.Func{{TIn},SwitchBehavior}
    typeParameters:
    - id: TIn
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn)(stream As IStream(Of TIn), name As String, initialState As KeepingState, switchToKeep As Func(Of TIn, SwitchBehavior), switchToIgnore As Func(Of TIn, SwitchBehavior)) As IStream(Of TIn)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), System.String, KeepingState, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, SwitchBehavior))
  name.vb: SelectSection(Of TIn)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  id: SelectSection``1(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>)
  nameWithType: SelectSectionEx.SelectSection<TIn>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn>(IStream<TIn>, System.String, System.Func<TIn, SwitchBehavior>, System.Func<TIn, SwitchBehavior>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 913
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TIn> SelectSection<TIn>(this IStream<TIn> stream, string name, Func<TIn, SwitchBehavior> switchToKeep, Func<TIn, SwitchBehavior> switchToIgnore)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: switchToKeep
      type: System.Func{{TIn},SwitchBehavior}
    - id: switchToIgnore
      type: System.Func{{TIn},SwitchBehavior}
    typeParameters:
    - id: TIn
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn)(stream As IStream(Of TIn), name As String, switchToKeep As Func(Of TIn, SwitchBehavior), switchToIgnore As Func(Of TIn, SwitchBehavior)) As IStream(Of TIn)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn)(IStream(Of TIn), System.String, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, SwitchBehavior))
  name.vb: SelectSection(Of TIn)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  id: SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn, TOut>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  nameWithType: SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, System.String, KeepingState, System.Func<TIn, SwitchBehavior>, System.Func<TIn, System.Int32, TOut>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 935
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TOut> SelectSection<TIn, TOut>(this IStream<TIn> stream, string name, KeepingState initialState, Func<TIn, SwitchBehavior> switcher, Func<TIn, int, TOut> resultSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: initialState
      type: KeepingState
    - id: switcher
      type: System.Func{{TIn},SwitchBehavior}
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TOut}}
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn, TOut)(stream As IStream(Of TIn), name As String, initialState As KeepingState, switcher As Func(Of TIn, SwitchBehavior), resultSelector As Func(Of TIn, Integer, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), System.String, KeepingState, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, System.Int32, TOut))
  name.vb: SelectSection(Of TIn, TOut)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  id: SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn, TOut>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  nameWithType: SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, System.String, System.Func<TIn, SwitchBehavior>, System.Func<TIn, System.Int32, TOut>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 945
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TOut> SelectSection<TIn, TOut>(this IStream<TIn> stream, string name, Func<TIn, SwitchBehavior> switcher, Func<TIn, int, TOut> resultSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: switcher
      type: System.Func{{TIn},SwitchBehavior}
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TOut}}
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn, TOut)(stream As IStream(Of TIn), name As String, switcher As Func(Of TIn, SwitchBehavior), resultSelector As Func(Of TIn, Integer, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), System.String, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, System.Int32, TOut))
  name.vb: SelectSection(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  id: SelectSection``2(IStream{``0},System.String,KeepingState,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn, TOut>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  nameWithType: SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, String, KeepingState, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, System.String, KeepingState, System.Func<TIn, SwitchBehavior>, System.Func<TIn, SwitchBehavior>, System.Func<TIn, System.Int32, TOut>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 954
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TOut> SelectSection<TIn, TOut>(this IStream<TIn> stream, string name, KeepingState initialState, Func<TIn, SwitchBehavior> switchToKeep, Func<TIn, SwitchBehavior> switchToIgnore, Func<TIn, int, TOut> resultSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: initialState
      type: KeepingState
    - id: switchToKeep
      type: System.Func{{TIn},SwitchBehavior}
    - id: switchToIgnore
      type: System.Func{{TIn},SwitchBehavior}
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TOut}}
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn, TOut)(stream As IStream(Of TIn), name As String, initialState As KeepingState, switchToKeep As Func(Of TIn, SwitchBehavior), switchToIgnore As Func(Of TIn, SwitchBehavior), resultSelector As Func(Of TIn, Integer, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), System.String, KeepingState, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, System.Int32, TOut))
  name.vb: SelectSection(Of TIn, TOut)(IStream(Of TIn), String, KeepingState, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  commentId: M:Paillave.Etl.Extensions.SelectSectionEx.SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  id: SelectSection``2(IStream{``0},System.String,System.Func{``0,SwitchBehavior},System.Func{``0,SwitchBehavior},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectSectionEx
  langs:
  - csharp
  - vb
  name: SelectSection<TIn, TOut>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  nameWithType: SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, String, Func<TIn, SwitchBehavior>, Func<TIn, SwitchBehavior>, Func<TIn, Int32, TOut>)
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection<TIn, TOut>(IStream<TIn>, System.String, System.Func<TIn, SwitchBehavior>, System.Func<TIn, SwitchBehavior>, System.Func<TIn, System.Int32, TOut>)
  type: Method
  source:
    id: SelectSection
    path: ''
    startLine: 965
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static IStream<TOut> SelectSection<TIn, TOut>(this IStream<TIn> stream, string name, Func<TIn, SwitchBehavior> switchToKeep, Func<TIn, SwitchBehavior> switchToIgnore, Func<TIn, int, TOut> resultSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: switchToKeep
      type: System.Func{{TIn},SwitchBehavior}
    - id: switchToIgnore
      type: System.Func{{TIn},SwitchBehavior}
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TOut}}
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectSection(Of TIn, TOut)(stream As IStream(Of TIn), name As String, switchToKeep As Func(Of TIn, SwitchBehavior), switchToIgnore As Func(Of TIn, SwitchBehavior), resultSelector As Func(Of TIn, Integer, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  nameWithType.vb: SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectSectionEx.SelectSection(Of TIn, TOut)(IStream(Of TIn), System.String, System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, SwitchBehavior), System.Func(Of TIn, System.Int32, TOut))
  name.vb: SelectSection(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, SwitchBehavior), Func(Of TIn, SwitchBehavior), Func(Of TIn, Int32, TOut))
references:
- uid: Paillave.Etl.Extensions
  commentId: N:Paillave.Etl.Extensions
  name: Paillave.Etl.Extensions
  nameWithType: Paillave.Etl.Extensions
  fullName: Paillave.Etl.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.Extensions.SelectSectionEx.SelectSection*
  commentId: Overload:Paillave.Etl.Extensions.SelectSectionEx.SelectSection
  name: SelectSection
  nameWithType: SelectSectionEx.SelectSection
  fullName: Paillave.Etl.Extensions.SelectSectionEx.SelectSection
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: KeepingState
  isExternal: true
  name: KeepingState
  nameWithType: KeepingState
  fullName: KeepingState
- uid: System.Func{{TIn},SwitchBehavior}
  commentId: T:System.Func{``0,SwitchBehavior}
  parent: System
  definition: System.Func`2
  name: Func<TIn, SwitchBehavior>
  nameWithType: Func<TIn, SwitchBehavior>
  fullName: System.Func<TIn, SwitchBehavior>
  nameWithType.vb: Func(Of TIn, SwitchBehavior)
  fullName.vb: System.Func(Of TIn, SwitchBehavior)
  name.vb: Func(Of TIn, SwitchBehavior)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SwitchBehavior
    name: SwitchBehavior
    nameWithType: SwitchBehavior
    fullName: SwitchBehavior
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SwitchBehavior
    name: SwitchBehavior
    nameWithType: SwitchBehavior
    fullName: SwitchBehavior
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.Int32,{TOut}}
  commentId: T:System.Func{``0,System.Int32,``1}
  parent: System
  definition: System.Func`3
  name: Func<TIn, Int32, TOut>
  nameWithType: Func<TIn, Int32, TOut>
  fullName: System.Func<TIn, System.Int32, TOut>
  nameWithType.vb: Func(Of TIn, Int32, TOut)
  fullName.vb: System.Func(Of TIn, System.Int32, TOut)
  name.vb: Func(Of TIn, Int32, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TOut}}
  commentId: '!:IStream{``3}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
