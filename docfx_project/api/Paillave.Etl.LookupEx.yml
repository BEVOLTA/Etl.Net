### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.LookupEx
  commentId: T:Paillave.Etl.LookupEx
  id: LookupEx
  parent: Paillave.Etl
  children:
  - Paillave.Etl.LookupEx.Lookup``4(IStream{``0},System.String,IStream{``1},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: LookupEx
  nameWithType: LookupEx
  fullName: Paillave.Etl.LookupEx
  type: Class
  source:
    id: LookupEx
    path: ''
    startLine: 568
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static class LookupEx
    content.vb: Public Module LookupEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.LookupEx.Lookup``4(IStream{``0},System.String,IStream{``1},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``2})
  commentId: M:Paillave.Etl.LookupEx.Lookup``4(IStream{``0},System.String,IStream{``1},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``2})
  id: Lookup``4(IStream{``0},System.String,IStream{``1},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: Paillave.Etl.LookupEx
  langs:
  - csharp
  - vb
  name: Lookup<TInLeft, TInRight, TOut, TKey>(IStream<TInLeft>, String, IStream<TInRight>, Func<TInLeft, TKey>, Func<TInRight, TKey>, Func<TInLeft, TInRight, TOut>)
  nameWithType: LookupEx.Lookup<TInLeft, TInRight, TOut, TKey>(IStream<TInLeft>, String, IStream<TInRight>, Func<TInLeft, TKey>, Func<TInRight, TKey>, Func<TInLeft, TInRight, TOut>)
  fullName: Paillave.Etl.LookupEx.Lookup<TInLeft, TInRight, TOut, TKey>(IStream<TInLeft>, System.String, IStream<TInRight>, System.Func<TInLeft, TKey>, System.Func<TInRight, TKey>, System.Func<TInLeft, TInRight, TOut>)
  type: Method
  source:
    id: Lookup
    path: ''
    startLine: 570
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<TOut> Lookup<TInLeft, TInRight, TOut, TKey>(this IStream<TInLeft> leftStream, string name, IStream<TInRight> rightStream, Func<TInLeft, TKey> leftKey, Func<TInRight, TKey> rightKey, Func<TInLeft, TInRight, TOut> resultSelector)
    parameters:
    - id: leftStream
      type: IStream{{TInLeft}}
    - id: name
      type: System.String
    - id: rightStream
      type: IStream{{TInRight}}
    - id: leftKey
      type: System.Func{{TInLeft},{TKey}}
    - id: rightKey
      type: System.Func{{TInRight},{TKey}}
    - id: resultSelector
      type: System.Func{{TInLeft},{TInRight},{TOut}}
    typeParameters:
    - id: TInLeft
    - id: TInRight
    - id: TOut
    - id: TKey
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Lookup(Of TInLeft, TInRight, TOut, TKey)(leftStream As IStream(Of TInLeft), name As String, rightStream As IStream(Of TInRight), leftKey As Func(Of TInLeft, TKey), rightKey As Func(Of TInRight, TKey), resultSelector As Func(Of TInLeft, TInRight, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.LookupEx.Lookup*
  nameWithType.vb: LookupEx.Lookup(Of TInLeft, TInRight, TOut, TKey)(IStream(Of TInLeft), String, IStream(Of TInRight), Func(Of TInLeft, TKey), Func(Of TInRight, TKey), Func(Of TInLeft, TInRight, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.LookupEx.Lookup(Of TInLeft, TInRight, TOut, TKey)(IStream(Of TInLeft), System.String, IStream(Of TInRight), System.Func(Of TInLeft, TKey), System.Func(Of TInRight, TKey), System.Func(Of TInLeft, TInRight, TOut))
  name.vb: Lookup(Of TInLeft, TInRight, TOut, TKey)(IStream(Of TInLeft), String, IStream(Of TInRight), Func(Of TInLeft, TKey), Func(Of TInRight, TKey), Func(Of TInLeft, TInRight, TOut))
references:
- uid: Paillave.Etl
  commentId: N:Paillave.Etl
  name: Paillave.Etl
  nameWithType: Paillave.Etl
  fullName: Paillave.Etl
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.LookupEx.Lookup*
  commentId: Overload:Paillave.Etl.LookupEx.Lookup
  name: Lookup
  nameWithType: LookupEx.Lookup
  fullName: Paillave.Etl.LookupEx.Lookup
- uid: IStream{{TInLeft}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TInLeft>
  nameWithType: IStream<TInLeft>
  fullName: IStream<TInLeft>
  nameWithType.vb: IStream(Of TInLeft)
  fullName.vb: IStream(Of TInLeft)
  name.vb: IStream(Of TInLeft)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IStream{{TInRight}}
  commentId: '!:IStream{``1}'
  definition: IStream`1
  name: IStream<TInRight>
  nameWithType: IStream<TInRight>
  fullName: IStream<TInRight>
  nameWithType.vb: IStream(Of TInRight)
  fullName.vb: IStream(Of TInRight)
  name.vb: IStream(Of TInRight)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInLeft},{TKey}}
  commentId: T:System.Func{``0,``3}
  parent: System
  definition: System.Func`2
  name: Func<TInLeft, TKey>
  nameWithType: Func<TInLeft, TKey>
  fullName: System.Func<TInLeft, TKey>
  nameWithType.vb: Func(Of TInLeft, TKey)
  fullName.vb: System.Func(Of TInLeft, TKey)
  name.vb: Func(Of TInLeft, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInRight},{TKey}}
  commentId: T:System.Func{``1,``3}
  parent: System
  definition: System.Func`2
  name: Func<TInRight, TKey>
  nameWithType: Func<TInRight, TKey>
  fullName: System.Func<TInRight, TKey>
  nameWithType.vb: Func(Of TInRight, TKey)
  fullName.vb: System.Func(Of TInRight, TKey)
  name.vb: Func(Of TInRight, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TInLeft},{TInRight},{TOut}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TInLeft, TInRight, TOut>
  nameWithType: Func<TInLeft, TInRight, TOut>
  fullName: System.Func<TInLeft, TInRight, TOut>
  nameWithType.vb: Func(Of TInLeft, TInRight, TOut)
  fullName.vb: System.Func(Of TInLeft, TInRight, TOut)
  name.vb: Func(Of TInLeft, TInRight, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInLeft
    nameWithType: TInLeft
    fullName: TInLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInRight
    nameWithType: TInRight
    fullName: TInRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TOut}}
  commentId: '!:IStream{``3}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
