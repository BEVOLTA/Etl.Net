### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.Extensions.CrossApplyEnumerableEx
  commentId: T:Paillave.Etl.Extensions.CrossApplyEnumerableEx
  id: CrossApplyEnumerableEx
  parent: Paillave.Etl.Extensions
  children:
  - Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``2(IStream{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)
  - Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},System.Boolean)
  langs:
  - csharp
  - vb
  name: CrossApplyEnumerableEx
  nameWithType: CrossApplyEnumerableEx
  fullName: Paillave.Etl.Extensions.CrossApplyEnumerableEx
  type: Class
  source:
    id: CrossApplyEnumerableEx
    path: ''
    startLine: 209
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nProduce a stream of rows based on an enumerable\n"
  example: []
  syntax:
    content: public static class CrossApplyEnumerableEx
    content.vb: Public Module CrossApplyEnumerableEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``2(IStream{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)
  commentId: M:Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``2(IStream{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)
  id: CrossApplyEnumerable``2(IStream{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.CrossApplyEnumerableEx
  langs:
  - csharp
  - vb
  name: CrossApplyEnumerable<TIn, TOut>(IStream<TIn>, String, Func<TIn, IEnumerable<TOut>>, Boolean)
  nameWithType: CrossApplyEnumerableEx.CrossApplyEnumerable<TIn, TOut>(IStream<TIn>, String, Func<TIn, IEnumerable<TOut>>, Boolean)
  fullName: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable<TIn, TOut>(IStream<TIn>, System.String, System.Func<TIn, System.Collections.Generic.IEnumerable<TOut>>, System.Boolean)
  type: Method
  source:
    id: CrossApplyEnumerable
    path: ''
    startLine: 227
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nProduces a stream of rows based on a enumerable using input stream\n"
  example:
  - "\n<pre><code class=\"cs\"><pre><code source=\"CrossApplyEnumerable.StreamEx.cs\"></code></pre>\n</code></pre>\n"
  syntax:
    content: public static IStream<TOut> CrossApplyEnumerable<TIn, TOut>(this IStream<TIn> stream, string name, Func<TIn, IEnumerable<TOut>> values, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: values
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TOut}}}
      description: Enumerable that contains values to submit to the output stream
    - id: noParallelisation
      type: System.Boolean
      description: if set to true, values won&apos;t be issued concurrently, preventing them to be mixed
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyEnumerable(Of TIn, TOut)(stream As IStream(Of TIn), name As String, values As Func(Of TIn, IEnumerable(Of TOut)), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable*
  nameWithType.vb: CrossApplyEnumerableEx.CrossApplyEnumerable(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, IEnumerable(Of TOut)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable(Of TIn, TOut)(IStream(Of TIn), System.String, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TOut)), System.Boolean)
  name.vb: CrossApplyEnumerable(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, IEnumerable(Of TOut)), Boolean)
- uid: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},System.Boolean)
  commentId: M:Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},System.Boolean)
  id: CrossApplyEnumerable``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.CrossApplyEnumerableEx
  langs:
  - csharp
  - vb
  name: CrossApplyEnumerable<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, IEnumerable<TOut>>, Boolean)
  nameWithType: CrossApplyEnumerableEx.CrossApplyEnumerable<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, IEnumerable<TOut>>, Boolean)
  fullName: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable<TIn1, TIn2, TOut>(IStream<TIn1>, System.String, ISingleStream<TIn2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TOut>>, System.Boolean)
  type: Method
  source:
    id: CrossApplyEnumerable
    path: ''
    startLine: 254
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nProduces a stream of rows based on a enumerable using input stream and resource stream\n"
  example: []
  syntax:
    content: public static IStream<TOut> CrossApplyEnumerable<TIn1, TIn2, TOut>(this IStream<TIn1> stream, string name, ISingleStream<TIn2> streamToApply, Func<TIn1, TIn2, IEnumerable<TOut>> values, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn1}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: streamToApply
      type: ISingleStream{{TIn2}}
      description: The stream that contains the single element that will be applied to each element of the main stream with the result selector
    - id: values
      type: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TOut}}}
      description: Enumerable that contains values to submit to the output stream
    - id: noParallelisation
      type: System.Boolean
      description: if set to true, values won&apos;t be issued concurrently, preventing them to be mixed
    typeParameters:
    - id: TIn1
      description: Input type
    - id: TIn2
      description: Resource type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyEnumerable(Of TIn1, TIn2, TOut)(stream As IStream(Of TIn1), name As String, streamToApply As ISingleStream(Of TIn2), values As Func(Of TIn1, TIn2, IEnumerable(Of TOut)), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable*
  nameWithType.vb: CrossApplyEnumerableEx.CrossApplyEnumerable(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, IEnumerable(Of TOut)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable(Of TIn1, TIn2, TOut)(IStream(Of TIn1), System.String, ISingleStream(Of TIn2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TOut)), System.Boolean)
  name.vb: CrossApplyEnumerable(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, IEnumerable(Of TOut)), Boolean)
references:
- uid: Paillave.Etl.Extensions
  commentId: N:Paillave.Etl.Extensions
  name: Paillave.Etl.Extensions
  nameWithType: Paillave.Etl.Extensions
  fullName: Paillave.Etl.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable*
  commentId: Overload:Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable
  name: CrossApplyEnumerable
  nameWithType: CrossApplyEnumerableEx.CrossApplyEnumerable
  fullName: Paillave.Etl.Extensions.CrossApplyEnumerableEx.CrossApplyEnumerable
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TOut}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  parent: System
  definition: System.Func`2
  name: Func<TIn, IEnumerable<TOut>>
  nameWithType: Func<TIn, IEnumerable<TOut>>
  fullName: System.Func<TIn, System.Collections.Generic.IEnumerable<TOut>>
  nameWithType.vb: Func(Of TIn, IEnumerable(Of TOut))
  fullName.vb: System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TOut))
  name.vb: Func(Of TIn, IEnumerable(Of TOut))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IStream{{TOut}}
  commentId: '!:IStream{``3}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TIn1}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn1>
  nameWithType: IStream<TIn1>
  fullName: IStream<TIn1>
  nameWithType.vb: IStream(Of TIn1)
  fullName.vb: IStream(Of TIn1)
  name.vb: IStream(Of TIn1)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream{{TIn2}}
  commentId: '!:ISingleStream{``1}'
  definition: ISingleStream`1
  name: ISingleStream<TIn2>
  nameWithType: ISingleStream<TIn2>
  fullName: ISingleStream<TIn2>
  nameWithType.vb: ISingleStream(Of TIn2)
  fullName.vb: ISingleStream(Of TIn2)
  name.vb: ISingleStream(Of TIn2)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TOut}}}
  commentId: T:System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, IEnumerable<TOut>>
  nameWithType: Func<TIn1, TIn2, IEnumerable<TOut>>
  fullName: System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TOut>>
  nameWithType.vb: Func(Of TIn1, TIn2, IEnumerable(Of TOut))
  fullName.vb: System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TOut))
  name.vb: Func(Of TIn1, TIn2, IEnumerable(Of TOut))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream`1
  isExternal: true
  name: ISingleStream<>
  nameWithType: ISingleStream<>
  fullName: ISingleStream<>
  nameWithType.vb: ISingleStream(Of )
  fullName.vb: ISingleStream(Of )
  name.vb: ISingleStream(Of )
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
