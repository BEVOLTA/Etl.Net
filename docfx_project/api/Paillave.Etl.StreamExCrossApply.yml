### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.StreamExCrossApply
  commentId: T:Paillave.Etl.StreamExCrossApply
  id: StreamExCrossApply
  parent: Paillave.Etl
  children:
  - Paillave.Etl.StreamExCrossApply.CrossApply``2(IStream{``0},System.String,IValuesProvider{``0,``1})
  - Paillave.Etl.StreamExCrossApply.CrossApply``3(IStream{``0},System.String,IStream{``1},IValuesProvider{``0,``1,``2})
  - Paillave.Etl.StreamExCrossApply.CrossApply``4(IStream{``0},System.String,IValuesProvider{``1,``2},System.Func{``0,``1},System.Func{``2,``0,``3})
  - Paillave.Etl.StreamExCrossApply.CrossApply``5(IStream{``0},System.String,IStream{``1},IValuesProvider{``2,``1,``3},System.Func{``0,``1,``2},System.Func{``3,``0,``1,``4})
  langs:
  - csharp
  - vb
  name: StreamExCrossApply
  nameWithType: StreamExCrossApply
  fullName: Paillave.Etl.StreamExCrossApply
  type: Class
  source:
    id: StreamExCrossApply
    path: ''
    startLine: 103
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static class StreamExCrossApply
    content.vb: Public Module StreamExCrossApply
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.StreamExCrossApply.CrossApply``4(IStream{``0},System.String,IValuesProvider{``1,``2},System.Func{``0,``1},System.Func{``2,``0,``3})
  commentId: M:Paillave.Etl.StreamExCrossApply.CrossApply``4(IStream{``0},System.String,IValuesProvider{``1,``2},System.Func{``0,``1},System.Func{``2,``0,``3})
  id: CrossApply``4(IStream{``0},System.String,IValuesProvider{``1,``2},System.Func{``0,``1},System.Func{``2,``0,``3})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExCrossApply
  langs:
  - csharp
  - vb
  name: CrossApply<TIn, TValueIn, TValueOut, TOut>(IStream<TIn>, String, IValuesProvider<TValueIn, TValueOut>, Func<TIn, TValueIn>, Func<TValueOut, TIn, TOut>)
  nameWithType: StreamExCrossApply.CrossApply<TIn, TValueIn, TValueOut, TOut>(IStream<TIn>, String, IValuesProvider<TValueIn, TValueOut>, Func<TIn, TValueIn>, Func<TValueOut, TIn, TOut>)
  fullName: Paillave.Etl.StreamExCrossApply.CrossApply<TIn, TValueIn, TValueOut, TOut>(IStream<TIn>, System.String, IValuesProvider<TValueIn, TValueOut>, System.Func<TIn, TValueIn>, System.Func<TValueOut, TIn, TOut>)
  type: Method
  source:
    id: CrossApply
    path: ''
    startLine: 105
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<TOut> CrossApply<TIn, TValueIn, TValueOut, TOut>(this IStream<TIn> stream, string name, IValuesProvider<TValueIn, TValueOut> valuesProvider, Func<TIn, TValueIn> inputValueSelector, Func<TValueOut, TIn, TOut> outputValueSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: valuesProvider
      type: IValuesProvider{{TValueIn},{TValueOut}}
    - id: inputValueSelector
      type: System.Func{{TIn},{TValueIn}}
    - id: outputValueSelector
      type: System.Func{{TValueOut},{TIn},{TOut}}
    typeParameters:
    - id: TIn
    - id: TValueIn
    - id: TValueOut
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApply(Of TIn, TValueIn, TValueOut, TOut)(stream As IStream(Of TIn), name As String, valuesProvider As IValuesProvider(Of TValueIn, TValueOut), inputValueSelector As Func(Of TIn, TValueIn), outputValueSelector As Func(Of TValueOut, TIn, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.StreamExCrossApply.CrossApply*
  nameWithType.vb: StreamExCrossApply.CrossApply(Of TIn, TValueIn, TValueOut, TOut)(IStream(Of TIn), String, IValuesProvider(Of TValueIn, TValueOut), Func(Of TIn, TValueIn), Func(Of TValueOut, TIn, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExCrossApply.CrossApply(Of TIn, TValueIn, TValueOut, TOut)(IStream(Of TIn), System.String, IValuesProvider(Of TValueIn, TValueOut), System.Func(Of TIn, TValueIn), System.Func(Of TValueOut, TIn, TOut))
  name.vb: CrossApply(Of TIn, TValueIn, TValueOut, TOut)(IStream(Of TIn), String, IValuesProvider(Of TValueIn, TValueOut), Func(Of TIn, TValueIn), Func(Of TValueOut, TIn, TOut))
- uid: Paillave.Etl.StreamExCrossApply.CrossApply``2(IStream{``0},System.String,IValuesProvider{``0,``1})
  commentId: M:Paillave.Etl.StreamExCrossApply.CrossApply``2(IStream{``0},System.String,IValuesProvider{``0,``1})
  id: CrossApply``2(IStream{``0},System.String,IValuesProvider{``0,``1})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExCrossApply
  langs:
  - csharp
  - vb
  name: CrossApply<TIn, TOut>(IStream<TIn>, String, IValuesProvider<TIn, TOut>)
  nameWithType: StreamExCrossApply.CrossApply<TIn, TOut>(IStream<TIn>, String, IValuesProvider<TIn, TOut>)
  fullName: Paillave.Etl.StreamExCrossApply.CrossApply<TIn, TOut>(IStream<TIn>, System.String, IValuesProvider<TIn, TOut>)
  type: Method
  source:
    id: CrossApply
    path: ''
    startLine: 115
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<TOut> CrossApply<TIn, TOut>(this IStream<TIn> stream, string name, IValuesProvider<TIn, TOut> valuesProvider)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: valuesProvider
      type: IValuesProvider{{TIn},{TOut}}
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApply(Of TIn, TOut)(stream As IStream(Of TIn), name As String, valuesProvider As IValuesProvider(Of TIn, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.StreamExCrossApply.CrossApply*
  nameWithType.vb: StreamExCrossApply.CrossApply(Of TIn, TOut)(IStream(Of TIn), String, IValuesProvider(Of TIn, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExCrossApply.CrossApply(Of TIn, TOut)(IStream(Of TIn), System.String, IValuesProvider(Of TIn, TOut))
  name.vb: CrossApply(Of TIn, TOut)(IStream(Of TIn), String, IValuesProvider(Of TIn, TOut))
- uid: Paillave.Etl.StreamExCrossApply.CrossApply``5(IStream{``0},System.String,IStream{``1},IValuesProvider{``2,``1,``3},System.Func{``0,``1,``2},System.Func{``3,``0,``1,``4})
  commentId: M:Paillave.Etl.StreamExCrossApply.CrossApply``5(IStream{``0},System.String,IStream{``1},IValuesProvider{``2,``1,``3},System.Func{``0,``1,``2},System.Func{``3,``0,``1,``4})
  id: CrossApply``5(IStream{``0},System.String,IStream{``1},IValuesProvider{``2,``1,``3},System.Func{``0,``1,``2},System.Func{``3,``0,``1,``4})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExCrossApply
  langs:
  - csharp
  - vb
  name: CrossApply<TIn, TRes, TValueIn, TValueOut, TOut>(IStream<TIn>, String, IStream<TRes>, IValuesProvider<TValueIn, TRes, TValueOut>, Func<TIn, TRes, TValueIn>, Func<TValueOut, TIn, TRes, TOut>)
  nameWithType: StreamExCrossApply.CrossApply<TIn, TRes, TValueIn, TValueOut, TOut>(IStream<TIn>, String, IStream<TRes>, IValuesProvider<TValueIn, TRes, TValueOut>, Func<TIn, TRes, TValueIn>, Func<TValueOut, TIn, TRes, TOut>)
  fullName: Paillave.Etl.StreamExCrossApply.CrossApply<TIn, TRes, TValueIn, TValueOut, TOut>(IStream<TIn>, System.String, IStream<TRes>, IValuesProvider<TValueIn, TRes, TValueOut>, System.Func<TIn, TRes, TValueIn>, System.Func<TValueOut, TIn, TRes, TOut>)
  type: Method
  source:
    id: CrossApply
    path: ''
    startLine: 125
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<TOut> CrossApply<TIn, TRes, TValueIn, TValueOut, TOut>(this IStream<TIn> stream, string name, IStream<TRes> resourceStream, IValuesProvider<TValueIn, TRes, TValueOut> valuesProvider, Func<TIn, TRes, TValueIn> inputValueSelector, Func<TValueOut, TIn, TRes, TOut> outputValueSelector)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: resourceStream
      type: IStream{{TRes}}
    - id: valuesProvider
      type: IValuesProvider{{TValueIn},{TRes},{TValueOut}}
    - id: inputValueSelector
      type: System.Func{{TIn},{TRes},{TValueIn}}
    - id: outputValueSelector
      type: System.Func{{TValueOut},{TIn},{TRes},{TOut}}
    typeParameters:
    - id: TIn
    - id: TRes
    - id: TValueIn
    - id: TValueOut
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApply(Of TIn, TRes, TValueIn, TValueOut, TOut)(stream As IStream(Of TIn), name As String, resourceStream As IStream(Of TRes), valuesProvider As IValuesProvider(Of TValueIn, TRes, TValueOut), inputValueSelector As Func(Of TIn, TRes, TValueIn), outputValueSelector As Func(Of TValueOut, TIn, TRes, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.StreamExCrossApply.CrossApply*
  nameWithType.vb: StreamExCrossApply.CrossApply(Of TIn, TRes, TValueIn, TValueOut, TOut)(IStream(Of TIn), String, IStream(Of TRes), IValuesProvider(Of TValueIn, TRes, TValueOut), Func(Of TIn, TRes, TValueIn), Func(Of TValueOut, TIn, TRes, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExCrossApply.CrossApply(Of TIn, TRes, TValueIn, TValueOut, TOut)(IStream(Of TIn), System.String, IStream(Of TRes), IValuesProvider(Of TValueIn, TRes, TValueOut), System.Func(Of TIn, TRes, TValueIn), System.Func(Of TValueOut, TIn, TRes, TOut))
  name.vb: CrossApply(Of TIn, TRes, TValueIn, TValueOut, TOut)(IStream(Of TIn), String, IStream(Of TRes), IValuesProvider(Of TValueIn, TRes, TValueOut), Func(Of TIn, TRes, TValueIn), Func(Of TValueOut, TIn, TRes, TOut))
- uid: Paillave.Etl.StreamExCrossApply.CrossApply``3(IStream{``0},System.String,IStream{``1},IValuesProvider{``0,``1,``2})
  commentId: M:Paillave.Etl.StreamExCrossApply.CrossApply``3(IStream{``0},System.String,IStream{``1},IValuesProvider{``0,``1,``2})
  id: CrossApply``3(IStream{``0},System.String,IStream{``1},IValuesProvider{``0,``1,``2})
  isExtensionMethod: true
  parent: Paillave.Etl.StreamExCrossApply
  langs:
  - csharp
  - vb
  name: CrossApply<TIn, TRes, TOut>(IStream<TIn>, String, IStream<TRes>, IValuesProvider<TIn, TRes, TOut>)
  nameWithType: StreamExCrossApply.CrossApply<TIn, TRes, TOut>(IStream<TIn>, String, IStream<TRes>, IValuesProvider<TIn, TRes, TOut>)
  fullName: Paillave.Etl.StreamExCrossApply.CrossApply<TIn, TRes, TOut>(IStream<TIn>, System.String, IStream<TRes>, IValuesProvider<TIn, TRes, TOut>)
  type: Method
  source:
    id: CrossApply
    path: ''
    startLine: 136
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl
  syntax:
    content: public static IStream<TOut> CrossApply<TIn, TRes, TOut>(this IStream<TIn> stream, string name, IStream<TRes> resourceStream, IValuesProvider<TIn, TRes, TOut> valuesProvider)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: resourceStream
      type: IStream{{TRes}}
    - id: valuesProvider
      type: IValuesProvider{{TIn},{TRes},{TOut}}
    typeParameters:
    - id: TIn
    - id: TRes
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApply(Of TIn, TRes, TOut)(stream As IStream(Of TIn), name As String, resourceStream As IStream(Of TRes), valuesProvider As IValuesProvider(Of TIn, TRes, TOut)) As IStream(Of TOut)
  overload: Paillave.Etl.StreamExCrossApply.CrossApply*
  nameWithType.vb: StreamExCrossApply.CrossApply(Of TIn, TRes, TOut)(IStream(Of TIn), String, IStream(Of TRes), IValuesProvider(Of TIn, TRes, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.StreamExCrossApply.CrossApply(Of TIn, TRes, TOut)(IStream(Of TIn), System.String, IStream(Of TRes), IValuesProvider(Of TIn, TRes, TOut))
  name.vb: CrossApply(Of TIn, TRes, TOut)(IStream(Of TIn), String, IStream(Of TRes), IValuesProvider(Of TIn, TRes, TOut))
references:
- uid: Paillave.Etl
  commentId: N:Paillave.Etl
  name: Paillave.Etl
  nameWithType: Paillave.Etl
  fullName: Paillave.Etl
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.StreamExCrossApply.CrossApply*
  commentId: Overload:Paillave.Etl.StreamExCrossApply.CrossApply
  name: CrossApply
  nameWithType: StreamExCrossApply.CrossApply
  fullName: Paillave.Etl.StreamExCrossApply.CrossApply
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IValuesProvider{{TValueIn},{TValueOut}}
  commentId: '!:IValuesProvider{``1,``2}'
  definition: IValuesProvider`2
  name: IValuesProvider<TValueIn, TValueOut>
  nameWithType: IValuesProvider<TValueIn, TValueOut>
  fullName: IValuesProvider<TValueIn, TValueOut>
  nameWithType.vb: IValuesProvider(Of TValueIn, TValueOut)
  fullName.vb: IValuesProvider(Of TValueIn, TValueOut)
  name.vb: IValuesProvider(Of TValueIn, TValueOut)
  spec.csharp:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TValueIn}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TIn, TValueIn>
  nameWithType: Func<TIn, TValueIn>
  fullName: System.Func<TIn, TValueIn>
  nameWithType.vb: Func(Of TIn, TValueIn)
  fullName.vb: System.Func(Of TIn, TValueIn)
  name.vb: Func(Of TIn, TValueIn)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TValueOut},{TIn},{TOut}}
  commentId: T:System.Func{``2,``0,``3}
  parent: System
  definition: System.Func`3
  name: Func<TValueOut, TIn, TOut>
  nameWithType: Func<TValueOut, TIn, TOut>
  fullName: System.Func<TValueOut, TIn, TOut>
  nameWithType.vb: Func(Of TValueOut, TIn, TOut)
  fullName.vb: System.Func(Of TValueOut, TIn, TOut)
  name.vb: Func(Of TValueOut, TIn, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TOut}}
  commentId: '!:IStream{``2}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IValuesProvider`2
  isExternal: true
  name: IValuesProvider<, >
  nameWithType: IValuesProvider<, >
  fullName: IValuesProvider<, >
  nameWithType.vb: IValuesProvider(Of , )
  fullName.vb: IValuesProvider(Of , )
  name.vb: IValuesProvider(Of , )
  spec.csharp:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IValuesProvider{{TIn},{TOut}}
  commentId: '!:IValuesProvider{``0,``1}'
  definition: IValuesProvider`2
  name: IValuesProvider<TIn, TOut>
  nameWithType: IValuesProvider<TIn, TOut>
  fullName: IValuesProvider<TIn, TOut>
  nameWithType.vb: IValuesProvider(Of TIn, TOut)
  fullName.vb: IValuesProvider(Of TIn, TOut)
  name.vb: IValuesProvider(Of TIn, TOut)
  spec.csharp:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`2
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TRes}}
  commentId: '!:IStream{``1}'
  definition: IStream`1
  name: IStream<TRes>
  nameWithType: IStream<TRes>
  fullName: IStream<TRes>
  nameWithType.vb: IStream(Of TRes)
  fullName.vb: IStream(Of TRes)
  name.vb: IStream(Of TRes)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: )
    nameWithType: )
    fullName: )
- uid: IValuesProvider{{TValueIn},{TRes},{TValueOut}}
  commentId: '!:IValuesProvider{``2,``1,``3}'
  definition: IValuesProvider`3
  name: IValuesProvider<TValueIn, TRes, TValueOut>
  nameWithType: IValuesProvider<TValueIn, TRes, TValueOut>
  fullName: IValuesProvider<TValueIn, TRes, TValueOut>
  nameWithType.vb: IValuesProvider(Of TValueIn, TRes, TValueOut)
  fullName.vb: IValuesProvider(Of TValueIn, TRes, TValueOut)
  name.vb: IValuesProvider(Of TValueIn, TRes, TValueOut)
  spec.csharp:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TRes},{TValueIn}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TRes, TValueIn>
  nameWithType: Func<TIn, TRes, TValueIn>
  fullName: System.Func<TIn, TRes, TValueIn>
  nameWithType.vb: Func(Of TIn, TRes, TValueIn)
  fullName.vb: System.Func(Of TIn, TRes, TValueIn)
  name.vb: Func(Of TIn, TRes, TValueIn)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValueIn
    nameWithType: TValueIn
    fullName: TValueIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TValueOut},{TIn},{TRes},{TOut}}
  commentId: T:System.Func{``3,``0,``1,``4}
  parent: System
  definition: System.Func`4
  name: Func<TValueOut, TIn, TRes, TOut>
  nameWithType: Func<TValueOut, TIn, TRes, TOut>
  fullName: System.Func<TValueOut, TIn, TRes, TOut>
  nameWithType.vb: Func(Of TValueOut, TIn, TRes, TOut)
  fullName.vb: System.Func(Of TValueOut, TIn, TRes, TOut)
  name.vb: Func(Of TValueOut, TIn, TRes, TOut)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValueOut
    nameWithType: TValueOut
    fullName: TValueOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IValuesProvider`3
  isExternal: true
  name: IValuesProvider<, , >
  nameWithType: IValuesProvider<, , >
  fullName: IValuesProvider<, , >
  nameWithType.vb: IValuesProvider(Of , , )
  fullName.vb: IValuesProvider(Of , , )
  name.vb: IValuesProvider(Of , , )
  spec.csharp:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IValuesProvider{{TIn},{TRes},{TOut}}
  commentId: '!:IValuesProvider{``0,``1,``2}'
  definition: IValuesProvider`3
  name: IValuesProvider<TIn, TRes, TOut>
  nameWithType: IValuesProvider<TIn, TRes, TOut>
  fullName: IValuesProvider<TIn, TRes, TOut>
  nameWithType.vb: IValuesProvider(Of TIn, TRes, TOut)
  fullName.vb: IValuesProvider(Of TIn, TRes, TOut)
  name.vb: IValuesProvider(Of TIn, TRes, TOut)
  spec.csharp:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IValuesProvider`3
    name: IValuesProvider
    nameWithType: IValuesProvider
    fullName: IValuesProvider
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRes
    nameWithType: TRes
    fullName: TRes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
