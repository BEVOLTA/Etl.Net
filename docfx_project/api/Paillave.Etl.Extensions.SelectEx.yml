### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.Extensions.SelectEx
  commentId: T:Paillave.Etl.Extensions.SelectEx
  id: SelectEx
  parent: Paillave.Etl.Extensions
  children:
  - Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{``0,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,System.Int32,``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,System.Int32,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  - Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: SelectEx
  nameWithType: SelectEx
  fullName: Paillave.Etl.Extensions.SelectEx
  type: Class
  source:
    id: SelectEx
    path: ''
    startLine: 750
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nSet of extensions to transform elements of the input stream into another element.\n"
  remarks: "\nIf TOut implements <code>IDisposable</code> it will be automatically disposed once the ETL process is finished.\n"
  example: []
  syntax:
    content: public static class SelectEx
    content.vb: Public Module SelectEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  id: Select``2(IStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(IStream<TIn>, String, Func<TIn, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(IStream<TIn>, String, Func<TIn, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(IStream<TIn>, System.String, System.Func<TIn, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 762
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut>(this IStream<TIn> stream, string name, Func<TIn, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: resultSelector
      type: System.Func{{TIn},{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As IStream(Of TIn), name As String, resultSelector As Func(Of TIn, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), System.String, System.Func(Of TIn, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  id: Select``2(ISingleStream{``0},System.String,System.Func{``0,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(ISingleStream<TIn>, String, Func<TIn, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(ISingleStream<TIn>, String, Func<TIn, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(ISingleStream<TIn>, System.String, System.Func<TIn, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 772
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static ISingleStream<TOut> Select<TIn, TOut>(this ISingleStream<TIn> stream, string name, Func<TIn, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: ISingleStream{{TIn}}
    - id: name
      type: System.String
    - id: resultSelector
      type: System.Func{{TIn},{TOut}}
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: ISingleStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As ISingleStream(Of TIn), name As String, resultSelector As Func(Of TIn, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As ISingleStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(ISingleStream(Of TIn), String, Func(Of TIn, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(ISingleStream(Of TIn), System.String, System.Func(Of TIn, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(ISingleStream(Of TIn), String, Func(Of TIn, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  id: Select``3(IStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut, TCtx>(IStream<TIn>, String, TCtx, Func<TIn, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut, TCtx>(IStream<TIn>, String, TCtx, Func<TIn, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut, TCtx>(IStream<TIn>, System.String, TCtx, System.Func<TIn, TCtx, System.Action<TCtx>, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 794
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression that works with a context\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut, TCtx>(this IStream<TIn> stream, string name, TCtx initialContext, Func<TIn, TCtx, Action<TCtx>, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: initialContext
      type: '{TCtx}'
      description: Value of the initial context
    - id: resultSelector
      type: System.Func{{TIn},{TCtx},System.Action{{TCtx}},{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream using a context by permiting to change it
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    - id: TCtx
      description: Context type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut, TCtx)(stream As IStream(Of TIn), name As String, initialContext As TCtx, resultSelector As Func(Of TIn, TCtx, Action(Of TCtx), TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut, TCtx)(IStream(Of TIn), String, TCtx, Func(Of TIn, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut, TCtx)(IStream(Of TIn), System.String, TCtx, System.Func(Of TIn, TCtx, System.Action(Of TCtx), TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut, TCtx)(IStream(Of TIn), String, TCtx, Func(Of TIn, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  id: Select``3(ISingleStream{``0},System.String,``2,System.Func{``0,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut, TCtx>(ISingleStream<TIn>, String, TCtx, Func<TIn, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut, TCtx>(ISingleStream<TIn>, String, TCtx, Func<TIn, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut, TCtx>(ISingleStream<TIn>, System.String, TCtx, System.Func<TIn, TCtx, System.Action<TCtx>, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 804
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static ISingleStream<TOut> Select<TIn, TOut, TCtx>(this ISingleStream<TIn> stream, string name, TCtx initialContext, Func<TIn, TCtx, Action<TCtx>, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: ISingleStream{{TIn}}
    - id: name
      type: System.String
    - id: initialContext
      type: '{TCtx}'
    - id: resultSelector
      type: System.Func{{TIn},{TCtx},System.Action{{TCtx}},{TOut}}
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TOut
    - id: TCtx
    return:
      type: ISingleStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut, TCtx)(stream As ISingleStream(Of TIn), name As String, initialContext As TCtx, resultSelector As Func(Of TIn, TCtx, Action(Of TCtx), TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As ISingleStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut, TCtx)(ISingleStream(Of TIn), String, TCtx, Func(Of TIn, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut, TCtx)(ISingleStream(Of TIn), System.String, TCtx, System.Func(Of TIn, TCtx, System.Action(Of TCtx), TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut, TCtx)(ISingleStream(Of TIn), String, TCtx, Func(Of TIn, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  id: Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(IStream<TIn>, String, ISelectProcessor<TIn, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(IStream<TIn>, String, ISelectProcessor<TIn, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(IStream<TIn>, System.String, Paillave.Etl.StreamNodes.ISelectProcessor<TIn, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 824
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a processor\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut>(this IStream<TIn> stream, string name, ISelectProcessor<TIn, TOut> processor, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: processor
      type: Paillave.Etl.StreamNodes.ISelectProcessor{{TIn},{TOut}}
      description: Processor that will handle the transformation
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As IStream(Of TIn), name As String, processor As ISelectProcessor(Of TIn, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), String, ISelectProcessor(Of TIn, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), System.String, Paillave.Etl.StreamNodes.ISelectProcessor(Of TIn, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(IStream(Of TIn), String, ISelectProcessor(Of TIn, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(ISingleStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  id: Select``2(ISingleStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(ISingleStream<TIn>, String, ISelectProcessor<TIn, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(ISingleStream<TIn>, String, ISelectProcessor<TIn, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(ISingleStream<TIn>, System.String, Paillave.Etl.StreamNodes.ISelectProcessor<TIn, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 834
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static ISingleStream<TOut> Select<TIn, TOut>(this ISingleStream<TIn> stream, string name, ISelectProcessor<TIn, TOut> processor, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: ISingleStream{{TIn}}
    - id: name
      type: System.String
    - id: processor
      type: Paillave.Etl.StreamNodes.ISelectProcessor{{TIn},{TOut}}
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: ISingleStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As ISingleStream(Of TIn), name As String, processor As ISelectProcessor(Of TIn, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As ISingleStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(ISingleStream(Of TIn), String, ISelectProcessor(Of TIn, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(ISingleStream(Of TIn), System.String, Paillave.Etl.StreamNodes.ISelectProcessor(Of TIn, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(ISingleStream(Of TIn), String, ISelectProcessor(Of TIn, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{``0,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{``0,``1},System.Boolean,System.Boolean)
  id: Select``2(IStream{``0},System.String,Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{``0,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(IStream<TIn>, String, ISelectWithIndexProcessor<TIn, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(IStream<TIn>, String, ISelectWithIndexProcessor<TIn, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(IStream<TIn>, System.String, Paillave.Etl.StreamNodes.ISelectWithIndexProcessor<TIn, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 854
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a processor based on the occurrence index\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut>(this IStream<TIn> stream, string name, ISelectWithIndexProcessor<TIn, TOut> processor, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: processor
      type: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{{TIn},{TOut}}
      description: Processor that will handle the transformation using the occurrence index
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As IStream(Of TIn), name As String, processor As ISelectWithIndexProcessor(Of TIn, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), String, ISelectWithIndexProcessor(Of TIn, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), System.String, Paillave.Etl.StreamNodes.ISelectWithIndexProcessor(Of TIn, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(IStream(Of TIn), String, ISelectWithIndexProcessor(Of TIn, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,System.Int32,``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``2(IStream{``0},System.String,System.Func{``0,System.Int32,``1},System.Boolean,System.Boolean)
  id: Select``2(IStream{``0},System.String,System.Func{``0,System.Int32,``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut>(IStream<TIn>, String, Func<TIn, Int32, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut>(IStream<TIn>, String, Func<TIn, Int32, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut>(IStream<TIn>, System.String, System.Func<TIn, System.Int32, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 874
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression based on the occurrence index\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut>(this IStream<TIn> stream, string name, Func<TIn, int, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream using an occurrence index
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut)(stream As IStream(Of TIn), name As String, resultSelector As Func(Of TIn, Integer, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, Int32, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut)(IStream(Of TIn), System.String, System.Func(Of TIn, System.Int32, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut)(IStream(Of TIn), String, Func(Of TIn, Int32, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,System.Int32,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,``2,System.Func{``0,System.Int32,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  id: Select``3(IStream{``0},System.String,``2,System.Func{``0,System.Int32,``2,System.Action{``2},``1},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn, TOut, TCtx>(IStream<TIn>, String, TCtx, Func<TIn, Int32, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn, TOut, TCtx>(IStream<TIn>, String, TCtx, Func<TIn, Int32, TCtx, Action<TCtx>, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn, TOut, TCtx>(IStream<TIn>, System.String, TCtx, System.Func<TIn, System.Int32, TCtx, System.Action<TCtx>, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 896
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression that works with a context and the occurrence index\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn, TOut, TCtx>(this IStream<TIn> stream, string name, TCtx initialContext, Func<TIn, int, TCtx, Action<TCtx>, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: initialContext
      type: '{TCtx}'
      description: Value of the initial context
    - id: resultSelector
      type: System.Func{{TIn},System.Int32,{TCtx},System.Action{{TCtx}},{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream with a context and the occurrence index
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn
      description: Input type
    - id: TOut
      description: Output type
    - id: TCtx
      description: Context type
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn, TOut, TCtx)(stream As IStream(Of TIn), name As String, initialContext As TCtx, resultSelector As Func(Of TIn, Integer, TCtx, Action(Of TCtx), TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn, TOut, TCtx)(IStream(Of TIn), String, TCtx, Func(Of TIn, Int32, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn, TOut, TCtx)(IStream(Of TIn), System.String, TCtx, System.Func(Of TIn, System.Int32, TCtx, System.Action(Of TCtx), TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn, TOut, TCtx)(IStream(Of TIn), String, TCtx, Func(Of TIn, Int32, TCtx, Action(Of TCtx), TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  id: Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, Int32, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, Int32, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn1, TIn2, TOut>(IStream<TIn1>, System.String, ISingleStream<TIn2>, System.Func<TIn1, TIn2, System.Int32, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 919
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression. \nThe calculation takes in consideration a single element stream\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn1, TIn2, TOut>(this IStream<TIn1> stream, string name, ISingleStream<TIn2> streamToApply, Func<TIn1, TIn2, int, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn1}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: streamToApply
      type: ISingleStream{{TIn2}}
      description: The stream that contains the single element that will be applied to each element of the main stream with the result selector
    - id: resultSelector
      type: System.Func{{TIn1},{TIn2},System.Int32,{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream using the unique element of the stream to apply
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn1
      description: Main stream type
    - id: TIn2
      description: Applied stream type
    - id: TOut
      description: Output stream
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn1, TIn2, TOut)(stream As IStream(Of TIn1), name As String, streamToApply As ISingleStream(Of TIn2), resultSelector As Func(Of TIn1, TIn2, Integer, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, Int32, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), System.String, ISingleStream(Of TIn2), System.Func(Of TIn1, TIn2, System.Int32, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, Int32, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  id: Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,System.Int32,``2},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, Int32, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, Int32, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, System.String, ISingleStream<TIn2>, System.Func<TIn1, TIn2, System.Int32, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 930
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static ISingleStream<TOut> Select<TIn1, TIn2, TOut>(this ISingleStream<TIn1> stream, string name, ISingleStream<TIn2> streamToApply, Func<TIn1, TIn2, int, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: ISingleStream{{TIn1}}
    - id: name
      type: System.String
    - id: streamToApply
      type: ISingleStream{{TIn2}}
    - id: resultSelector
      type: System.Func{{TIn1},{TIn2},System.Int32,{TOut}}
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
    typeParameters:
    - id: TIn1
    - id: TIn2
    - id: TOut
    return:
      type: ISingleStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn1, TIn2, TOut)(stream As ISingleStream(Of TIn1), name As String, streamToApply As ISingleStream(Of TIn2), resultSelector As Func(Of TIn1, TIn2, Integer, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As ISingleStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, Int32, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), System.String, ISingleStream(Of TIn2), System.Func(Of TIn1, TIn2, System.Int32, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, Int32, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  id: Select``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn1, TIn2, TOut>(IStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn1, TIn2, TOut>(IStream<TIn1>, System.String, ISingleStream<TIn2>, System.Func<TIn1, TIn2, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 954
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  summary: "\nTransform the input stream into a similar stream but with a different structure and calculation using a lambda expression and the occurrence index. \nThe calculation takes in consideration a single element stream\n"
  example: []
  syntax:
    content: public static IStream<TOut> Select<TIn1, TIn2, TOut>(this IStream<TIn1> stream, string name, ISingleStream<TIn2> streamToApply, Func<TIn1, TIn2, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: IStream{{TIn1}}
      description: Input stream
    - id: name
      type: System.String
      description: Name of the operation
    - id: streamToApply
      type: ISingleStream{{TIn2}}
      description: The stream that contains the single element that will be applied to each element of the main stream with the result selector
    - id: resultSelector
      type: System.Func{{TIn1},{TIn2},{TOut}}
      description: Transformation to apply on an occurrence of an element of the stream using an occurrence index
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
      description: Any output that is null won&apos;t be issued
    typeParameters:
    - id: TIn1
      description: Main stream type
    - id: TIn2
      description: Applied stream type
    - id: TOut
      description: Output stream
    return:
      type: IStream{{TOut}}
      description: Output stream
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn1, TIn2, TOut)(stream As IStream(Of TIn1), name As String, streamToApply As ISingleStream(Of TIn2), resultSelector As Func(Of TIn1, TIn2, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), System.String, ISingleStream(Of TIn2), System.Func(Of TIn1, TIn2, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn1, TIn2, TOut)(IStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, TOut), Boolean, Boolean)
- uid: Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  commentId: M:Paillave.Etl.Extensions.SelectEx.Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  id: Select``3(ISingleStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,``2},System.Boolean,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.Extensions.SelectEx
  langs:
  - csharp
  - vb
  name: Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, TOut>, Boolean, Boolean)
  nameWithType: SelectEx.Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, String, ISingleStream<TIn2>, Func<TIn1, TIn2, TOut>, Boolean, Boolean)
  fullName: Paillave.Etl.Extensions.SelectEx.Select<TIn1, TIn2, TOut>(ISingleStream<TIn1>, System.String, ISingleStream<TIn2>, System.Func<TIn1, TIn2, TOut>, System.Boolean, System.Boolean)
  type: Method
  source:
    id: Select
    path: ''
    startLine: 965
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.Extensions
  syntax:
    content: public static ISingleStream<TOut> Select<TIn1, TIn2, TOut>(this ISingleStream<TIn1> stream, string name, ISingleStream<TIn2> streamToApply, Func<TIn1, TIn2, TOut> resultSelector, bool withNoDispose = false, bool excludeNull = false)
    parameters:
    - id: stream
      type: ISingleStream{{TIn1}}
    - id: name
      type: System.String
    - id: streamToApply
      type: ISingleStream{{TIn2}}
    - id: resultSelector
      type: System.Func{{TIn1},{TIn2},{TOut}}
    - id: withNoDispose
      type: System.Boolean
    - id: excludeNull
      type: System.Boolean
    typeParameters:
    - id: TIn1
    - id: TIn2
    - id: TOut
    return:
      type: ISingleStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TIn1, TIn2, TOut)(stream As ISingleStream(Of TIn1), name As String, streamToApply As ISingleStream(Of TIn2), resultSelector As Func(Of TIn1, TIn2, TOut), withNoDispose As Boolean = False, excludeNull As Boolean = False) As ISingleStream(Of TOut)
  overload: Paillave.Etl.Extensions.SelectEx.Select*
  nameWithType.vb: SelectEx.Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, TOut), Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.Extensions.SelectEx.Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), System.String, ISingleStream(Of TIn2), System.Func(Of TIn1, TIn2, TOut), System.Boolean, System.Boolean)
  name.vb: Select(Of TIn1, TIn2, TOut)(ISingleStream(Of TIn1), String, ISingleStream(Of TIn2), Func(Of TIn1, TIn2, TOut), Boolean, Boolean)
references:
- uid: Paillave.Etl.Extensions
  commentId: N:Paillave.Etl.Extensions
  name: Paillave.Etl.Extensions
  nameWithType: Paillave.Etl.Extensions
  fullName: Paillave.Etl.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.Extensions.SelectEx.Select*
  commentId: Overload:Paillave.Etl.Extensions.SelectEx.Select
  name: Select
  nameWithType: SelectEx.Select
  fullName: Paillave.Etl.Extensions.SelectEx.Select
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{{TIn},{TOut}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TIn, TOut>
  nameWithType: Func<TIn, TOut>
  fullName: System.Func<TIn, TOut>
  nameWithType.vb: Func(Of TIn, TOut)
  fullName.vb: System.Func(Of TIn, TOut)
  name.vb: Func(Of TIn, TOut)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IStream{{TOut}}
  commentId: '!:IStream{``3}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream{{TIn}}
  commentId: '!:ISingleStream{``0}'
  definition: ISingleStream`1
  name: ISingleStream<TIn>
  nameWithType: ISingleStream<TIn>
  fullName: ISingleStream<TIn>
  nameWithType.vb: ISingleStream(Of TIn)
  fullName.vb: ISingleStream(Of TIn)
  name.vb: ISingleStream(Of TIn)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream{{TOut}}
  commentId: '!:ISingleStream{``1}'
  definition: ISingleStream`1
  name: ISingleStream<TOut>
  nameWithType: ISingleStream<TOut>
  fullName: ISingleStream<TOut>
  nameWithType.vb: ISingleStream(Of TOut)
  fullName.vb: ISingleStream(Of TOut)
  name.vb: ISingleStream(Of TOut)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream`1
  isExternal: true
  name: ISingleStream<>
  nameWithType: ISingleStream<>
  fullName: ISingleStream<>
  nameWithType.vb: ISingleStream(Of )
  fullName.vb: ISingleStream(Of )
  name.vb: ISingleStream(Of )
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TCtx}'
  commentId: '!:TCtx'
  definition: TCtx
  name: TCtx
  nameWithType: TCtx
  fullName: TCtx
- uid: System.Func{{TIn},{TCtx},System.Action{{TCtx}},{TOut}}
  commentId: T:System.Func{``0,``2,System.Action{``2},``1}
  parent: System
  definition: System.Func`4
  name: Func<TIn, TCtx, Action<TCtx>, TOut>
  nameWithType: Func<TIn, TCtx, Action<TCtx>, TOut>
  fullName: System.Func<TIn, TCtx, System.Action<TCtx>, TOut>
  nameWithType.vb: Func(Of TIn, TCtx, Action(Of TCtx), TOut)
  fullName.vb: System.Func(Of TIn, TCtx, System.Action(Of TCtx), TOut)
  name.vb: Func(Of TIn, TCtx, Action(Of TCtx), TOut)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: TCtx
  name: TCtx
  nameWithType: TCtx
  fullName: TCtx
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.StreamNodes.ISelectProcessor{{TIn},{TOut}}
  commentId: T:Paillave.Etl.StreamNodes.ISelectProcessor{``0,``1}
  parent: Paillave.Etl.StreamNodes
  definition: Paillave.Etl.StreamNodes.ISelectProcessor`2
  name: ISelectProcessor<TIn, TOut>
  nameWithType: ISelectProcessor<TIn, TOut>
  fullName: Paillave.Etl.StreamNodes.ISelectProcessor<TIn, TOut>
  nameWithType.vb: ISelectProcessor(Of TIn, TOut)
  fullName.vb: Paillave.Etl.StreamNodes.ISelectProcessor(Of TIn, TOut)
  name.vb: ISelectProcessor(Of TIn, TOut)
  spec.csharp:
  - uid: Paillave.Etl.StreamNodes.ISelectProcessor`2
    name: ISelectProcessor
    nameWithType: ISelectProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Paillave.Etl.StreamNodes.ISelectProcessor`2
    name: ISelectProcessor
    nameWithType: ISelectProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.StreamNodes.ISelectProcessor`2
  commentId: T:Paillave.Etl.StreamNodes.ISelectProcessor`2
  name: ISelectProcessor<TIn, TOut>
  nameWithType: ISelectProcessor<TIn, TOut>
  fullName: Paillave.Etl.StreamNodes.ISelectProcessor<TIn, TOut>
  nameWithType.vb: ISelectProcessor(Of TIn, TOut)
  fullName.vb: Paillave.Etl.StreamNodes.ISelectProcessor(Of TIn, TOut)
  name.vb: ISelectProcessor(Of TIn, TOut)
  spec.csharp:
  - uid: Paillave.Etl.StreamNodes.ISelectProcessor`2
    name: ISelectProcessor
    nameWithType: ISelectProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Paillave.Etl.StreamNodes.ISelectProcessor`2
    name: ISelectProcessor
    nameWithType: ISelectProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.StreamNodes
  commentId: N:Paillave.Etl.StreamNodes
  name: Paillave.Etl.StreamNodes
  nameWithType: Paillave.Etl.StreamNodes
  fullName: Paillave.Etl.StreamNodes
- uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{{TIn},{TOut}}
  commentId: T:Paillave.Etl.StreamNodes.ISelectWithIndexProcessor{``0,``1}
  parent: Paillave.Etl.StreamNodes
  definition: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
  name: ISelectWithIndexProcessor<TIn, TOut>
  nameWithType: ISelectWithIndexProcessor<TIn, TOut>
  fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor<TIn, TOut>
  nameWithType.vb: ISelectWithIndexProcessor(Of TIn, TOut)
  fullName.vb: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor(Of TIn, TOut)
  name.vb: ISelectWithIndexProcessor(Of TIn, TOut)
  spec.csharp:
  - uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
    name: ISelectWithIndexProcessor
    nameWithType: ISelectWithIndexProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
    name: ISelectWithIndexProcessor
    nameWithType: ISelectWithIndexProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
  commentId: T:Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
  name: ISelectWithIndexProcessor<TIn, TOut>
  nameWithType: ISelectWithIndexProcessor<TIn, TOut>
  fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor<TIn, TOut>
  nameWithType.vb: ISelectWithIndexProcessor(Of TIn, TOut)
  fullName.vb: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor(Of TIn, TOut)
  name.vb: ISelectWithIndexProcessor(Of TIn, TOut)
  spec.csharp:
  - uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
    name: ISelectWithIndexProcessor
    nameWithType: ISelectWithIndexProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor`2
    name: ISelectWithIndexProcessor
    nameWithType: ISelectWithIndexProcessor
    fullName: Paillave.Etl.StreamNodes.ISelectWithIndexProcessor
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.Int32,{TOut}}
  commentId: T:System.Func{``0,System.Int32,``1}
  parent: System
  definition: System.Func`3
  name: Func<TIn, Int32, TOut>
  nameWithType: Func<TIn, Int32, TOut>
  fullName: System.Func<TIn, System.Int32, TOut>
  nameWithType.vb: Func(Of TIn, Int32, TOut)
  fullName.vb: System.Func(Of TIn, System.Int32, TOut)
  name.vb: Func(Of TIn, Int32, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.Int32,{TCtx},System.Action{{TCtx}},{TOut}}
  commentId: T:System.Func{``0,System.Int32,``2,System.Action{``2},``1}
  parent: System
  definition: System.Func`5
  name: Func<TIn, Int32, TCtx, Action<TCtx>, TOut>
  nameWithType: Func<TIn, Int32, TCtx, Action<TCtx>, TOut>
  fullName: System.Func<TIn, System.Int32, TCtx, System.Action<TCtx>, TOut>
  nameWithType.vb: Func(Of TIn, Int32, TCtx, Action(Of TCtx), TOut)
  fullName.vb: System.Func(Of TIn, System.Int32, TCtx, System.Action(Of TCtx), TOut)
  name.vb: Func(Of TIn, Int32, TCtx, Action(Of TCtx), TOut)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TIn1}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn1>
  nameWithType: IStream<TIn1>
  fullName: IStream<TIn1>
  nameWithType.vb: IStream(Of TIn1)
  fullName.vb: IStream(Of TIn1)
  name.vb: IStream(Of TIn1)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream{{TIn2}}
  commentId: '!:ISingleStream{``1}'
  definition: ISingleStream`1
  name: ISingleStream<TIn2>
  nameWithType: ISingleStream<TIn2>
  fullName: ISingleStream<TIn2>
  nameWithType.vb: ISingleStream(Of TIn2)
  fullName.vb: ISingleStream(Of TIn2)
  name.vb: ISingleStream(Of TIn2)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},System.Int32,{TOut}}
  commentId: T:System.Func{``0,``1,System.Int32,``2}
  parent: System
  definition: System.Func`4
  name: Func<TIn1, TIn2, Int32, TOut>
  nameWithType: Func<TIn1, TIn2, Int32, TOut>
  fullName: System.Func<TIn1, TIn2, System.Int32, TOut>
  nameWithType.vb: Func(Of TIn1, TIn2, Int32, TOut)
  fullName.vb: System.Func(Of TIn1, TIn2, System.Int32, TOut)
  name.vb: Func(Of TIn1, TIn2, Int32, TOut)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream{{TIn1}}
  commentId: '!:ISingleStream{``0}'
  definition: ISingleStream`1
  name: ISingleStream<TIn1>
  nameWithType: ISingleStream<TIn1>
  fullName: ISingleStream<TIn1>
  nameWithType.vb: ISingleStream(Of TIn1)
  fullName.vb: ISingleStream(Of TIn1)
  name.vb: ISingleStream(Of TIn1)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn1},{TIn2},{TOut}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TIn1, TIn2, TOut>
  nameWithType: Func<TIn1, TIn2, TOut>
  fullName: System.Func<TIn1, TIn2, TOut>
  nameWithType.vb: Func(Of TIn1, TIn2, TOut)
  fullName.vb: System.Func(Of TIn1, TIn2, TOut)
  name.vb: Func(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
