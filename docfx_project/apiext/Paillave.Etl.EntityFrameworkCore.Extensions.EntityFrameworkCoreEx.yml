### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  commentId: T:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  id: EntityFrameworkCoreEx
  parent: Paillave.Etl.EntityFrameworkCore.Extensions
  children:
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,IStream{``1},BulkLoadMode,System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IKeyedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(ISortedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  langs:
  - csharp
  - vb
  name: EntityFrameworkCoreEx
  nameWithType: EntityFrameworkCoreEx
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  type: Class
  source:
    id: EntityFrameworkCoreEx
    path: ''
    startLine: 10
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: public static class EntityFrameworkCoreEx
    content.vb: Public Module EntityFrameworkCoreEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  id: CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TResource, IQueryable<TOut>>, Boolean)
  nameWithType: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TResource, IQueryable<TOut>>, Boolean)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, System.String, ISingleStream<TResource>, System.Func<TIn, TResource, IQueryable<TOut>>, System.Boolean)
  type: Method
  source:
    id: CrossApplyEntityFrameworkCoreQuery
    path: ''
    startLine: 12
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(this IStream<TIn> stream, string name, ISingleStream<TResource> resourceStream, Func<TIn, TResource, IQueryable<TOut>> getQuery, bool noParallelisation = false)
          where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: resourceStream
      type: ISingleStream{{TResource}}
    - id: getQuery
      type: System.Func{{TIn},{TResource},IQueryable{{TOut}}}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource As DbContext, TOut)(stream As IStream(Of TIn), name As String, resourceStream As ISingleStream(Of TResource), getQuery As Func(Of TIn, TResource, IQueryable(Of TOut)), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery*
  nameWithType.vb: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TResource, IQueryable(Of TOut)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), System.String, ISingleStream(Of TResource), System.Func(Of TIn, TResource, IQueryable(Of TOut)), System.Boolean)
  name.vb: CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TResource, IQueryable(Of TOut)), Boolean)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,IStream{``1},BulkLoadMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,IStream{``1},BulkLoadMode,System.Int32)
  id: ThroughEntityFrameworkCore``2(IStream{``0},System.String,IStream{``1},BulkLoadMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, IStream<TResource>, BulkLoadMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, IStream<TResource>, BulkLoadMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, System.String, IStream<TResource>, BulkLoadMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 20
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TIn> ThroughEntityFrameworkCore<TIn, TResource>(this IStream<TIn> stream, string name, IStream<TResource> resourceStream, BulkLoadMode bulkLoadMode = null, int chunkSize = 1000)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: resourceStream
      type: IStream{{TResource}}
    - id: bulkLoadMode
      type: BulkLoadMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext)(stream As IStream(Of TIn), name As String, resourceStream As IStream(Of TResource), bulkLoadMode As BulkLoadMode = Nothing, chunkSize As Integer = 1000) As IStream(Of TIn)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, IStream(Of TResource), BulkLoadMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), System.String, IStream(Of TResource), BulkLoadMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, IStream(Of TResource), BulkLoadMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(ISortedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(ISortedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  id: ThroughEntityFrameworkCore``3(ISortedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TKey>(ISortedStream<TIn, TKey>, String, IStream<TResource>, BulkLoadMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TKey>(ISortedStream<TIn, TKey>, String, IStream<TResource>, BulkLoadMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TKey>(ISortedStream<TIn, TKey>, System.String, IStream<TResource>, BulkLoadMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 32
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static ISortedStream<TIn, TKey> ThroughEntityFrameworkCore<TIn, TResource, TKey>(this ISortedStream<TIn, TKey> stream, string name, IStream<TResource> resourceStream, BulkLoadMode bulkLoadMode = null, int chunkSize = 1000)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: ISortedStream{{TIn},{TKey}}
    - id: name
      type: System.String
    - id: resourceStream
      type: IStream{{TResource}}
    - id: bulkLoadMode
      type: BulkLoadMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TKey
    return:
      type: ISortedStream{{TIn},{TKey}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext, TKey)(stream As ISortedStream(Of TIn, TKey), name As String, resourceStream As IStream(Of TResource), bulkLoadMode As BulkLoadMode = Nothing, chunkSize As Integer = 1000) As ISortedStream(Of TIn, TKey)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(ISortedStream(Of TIn, TKey), String, IStream(Of TResource), BulkLoadMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(ISortedStream(Of TIn, TKey), System.String, IStream(Of TResource), BulkLoadMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(ISortedStream(Of TIn, TKey), String, IStream(Of TResource), BulkLoadMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IKeyedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IKeyedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  id: ThroughEntityFrameworkCore``3(IKeyedStream{``0,``2},System.String,IStream{``1},BulkLoadMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TKey>(IKeyedStream<TIn, TKey>, String, IStream<TResource>, BulkLoadMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TKey>(IKeyedStream<TIn, TKey>, String, IStream<TResource>, BulkLoadMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TKey>(IKeyedStream<TIn, TKey>, System.String, IStream<TResource>, BulkLoadMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 44
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IKeyedStream<TIn, TKey> ThroughEntityFrameworkCore<TIn, TResource, TKey>(this IKeyedStream<TIn, TKey> stream, string name, IStream<TResource> resourceStream, BulkLoadMode bulkLoadMode = null, int chunkSize = 1000)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: IKeyedStream{{TIn},{TKey}}
    - id: name
      type: System.String
    - id: resourceStream
      type: IStream{{TResource}}
    - id: bulkLoadMode
      type: BulkLoadMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TKey
    return:
      type: IKeyedStream{{TIn},{TKey}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext, TKey)(stream As IKeyedStream(Of TIn, TKey), name As String, resourceStream As IStream(Of TResource), bulkLoadMode As BulkLoadMode = Nothing, chunkSize As Integer = 1000) As IKeyedStream(Of TIn, TKey)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(IKeyedStream(Of TIn, TKey), String, IStream(Of TResource), BulkLoadMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(IKeyedStream(Of TIn, TKey), System.String, IStream(Of TResource), BulkLoadMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TKey)(IKeyedStream(Of TIn, TKey), String, IStream(Of TResource), BulkLoadMode, Int32)
references:
- uid: Paillave.Etl.EntityFrameworkCore.Extensions
  commentId: N:Paillave.Etl.EntityFrameworkCore.Extensions
  name: Paillave.Etl.EntityFrameworkCore.Extensions
  nameWithType: Paillave.Etl.EntityFrameworkCore.Extensions
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
  name: CrossApplyEntityFrameworkCoreQuery
  nameWithType: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ISingleStream{{TResource}}
  commentId: '!:ISingleStream{``1}'
  definition: ISingleStream`1
  name: ISingleStream<TResource>
  nameWithType: ISingleStream<TResource>
  fullName: ISingleStream<TResource>
  nameWithType.vb: ISingleStream(Of TResource)
  fullName.vb: ISingleStream(Of TResource)
  name.vb: ISingleStream(Of TResource)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TResource},IQueryable{{TOut}}}
  commentId: T:System.Func{``0,``1,IQueryable{``2}}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TResource, IQueryable<TOut>>
  nameWithType: Func<TIn, TResource, IQueryable<TOut>>
  fullName: System.Func<TIn, TResource, IQueryable<TOut>>
  nameWithType.vb: Func(Of TIn, TResource, IQueryable(Of TOut))
  fullName.vb: System.Func(Of TIn, TResource, IQueryable(Of TOut))
  name.vb: Func(Of TIn, TResource, IQueryable(Of TOut))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IStream{{TOut}}
  commentId: '!:IStream{``2}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream`1
  isExternal: true
  name: ISingleStream<>
  nameWithType: ISingleStream<>
  fullName: ISingleStream<>
  nameWithType.vb: ISingleStream(Of )
  fullName.vb: ISingleStream(Of )
  name.vb: ISingleStream(Of )
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore
  name: ThroughEntityFrameworkCore
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore
- uid: IStream{{TResource}}
  commentId: '!:IStream{``1}'
  definition: IStream`1
  name: IStream<TResource>
  nameWithType: IStream<TResource>
  fullName: IStream<TResource>
  nameWithType.vb: IStream(Of TResource)
  fullName.vb: IStream(Of TResource)
  name.vb: IStream(Of TResource)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: BulkLoadMode
  isExternal: true
  name: BulkLoadMode
  nameWithType: BulkLoadMode
  fullName: BulkLoadMode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ISortedStream{{TIn},{TKey}}
  commentId: '!:ISortedStream{``0,``2}'
  definition: ISortedStream`2
  name: ISortedStream<TIn, TKey>
  nameWithType: ISortedStream<TIn, TKey>
  fullName: ISortedStream<TIn, TKey>
  nameWithType.vb: ISortedStream(Of TIn, TKey)
  fullName.vb: ISortedStream(Of TIn, TKey)
  name.vb: ISortedStream(Of TIn, TKey)
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: ISortedStream`2
  isExternal: true
  name: ISortedStream<, >
  nameWithType: ISortedStream<, >
  fullName: ISortedStream<, >
  nameWithType.vb: ISortedStream(Of , )
  fullName.vb: ISortedStream(Of , )
  name.vb: ISortedStream(Of , )
  spec.csharp:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISortedStream`2
    name: ISortedStream
    nameWithType: ISortedStream
    fullName: ISortedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IKeyedStream{{TIn},{TKey}}
  commentId: '!:IKeyedStream{``0,``2}'
  definition: IKeyedStream`2
  name: IKeyedStream<TIn, TKey>
  nameWithType: IKeyedStream<TIn, TKey>
  fullName: IKeyedStream<TIn, TKey>
  nameWithType.vb: IKeyedStream(Of TIn, TKey)
  fullName.vb: IKeyedStream(Of TIn, TKey)
  name.vb: IKeyedStream(Of TIn, TKey)
  spec.csharp:
  - uid: IKeyedStream`2
    name: IKeyedStream
    nameWithType: IKeyedStream
    fullName: IKeyedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IKeyedStream`2
    name: IKeyedStream
    nameWithType: IKeyedStream
    fullName: IKeyedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: IKeyedStream`2
  isExternal: true
  name: IKeyedStream<, >
  nameWithType: IKeyedStream<, >
  fullName: IKeyedStream<, >
  nameWithType.vb: IKeyedStream(Of , )
  fullName.vb: IKeyedStream(Of , )
  name.vb: IKeyedStream(Of , )
  spec.csharp:
  - uid: IKeyedStream`2
    name: IKeyedStream
    nameWithType: IKeyedStream
    fullName: IKeyedStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IKeyedStream`2
    name: IKeyedStream
    nameWithType: IKeyedStream
    fullName: IKeyedStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
