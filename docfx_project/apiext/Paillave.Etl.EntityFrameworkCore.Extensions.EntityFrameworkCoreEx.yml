### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  commentId: T:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  id: EntityFrameworkCoreEx
  parent: Paillave.Etl.EntityFrameworkCore.Extensions
  children:
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete``3(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}})
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup``4(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}},System.Func{``0,``1,``3},System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``0,System.Boolean}},System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},SaveMode,System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``2}},SaveByKeyMode,System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},Expression{System.Func{``3,``3,System.Boolean}},System.Func{``0,``3,``2},System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},System.Func{``0,``3,``2},SaveMode,System.Int32)
  - Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``5(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``4},Expression{System.Func{``4,``2}},System.Func{``0,``4,``3},SaveByKeyMode,System.Int32)
  langs:
  - csharp
  - vb
  name: EntityFrameworkCoreEx
  nameWithType: EntityFrameworkCoreEx
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  type: Class
  source:
    id: EntityFrameworkCoreEx
    path: ''
    startLine: 11
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: public static class EntityFrameworkCoreEx
    content.vb: Public Module EntityFrameworkCoreEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  id: CrossApplyEntityFrameworkCoreQuery``3(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``1,IQueryable{``2}},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TResource, IQueryable<TOut>>, Boolean)
  nameWithType: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TResource, IQueryable<TOut>>, Boolean)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(IStream<TIn>, System.String, ISingleStream<TResource>, System.Func<TIn, TResource, IQueryable<TOut>>, System.Boolean)
  type: Method
  source:
    id: CrossApplyEntityFrameworkCoreQuery
    path: ''
    startLine: 13
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> CrossApplyEntityFrameworkCoreQuery<TIn, TResource, TOut>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Func<TIn, TResource, IQueryable<TOut>> getQuery, bool noParallelisation = false)
          where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: getQuery
      type: System.Func{{TIn},{TResource},IQueryable{{TOut}}}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource As DbContext, TOut)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), getQuery As Func(Of TIn, TResource, IQueryable(Of TOut)), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery*
  nameWithType.vb: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TResource, IQueryable(Of TOut)), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), System.String, ISingleStream(Of TResource), System.Func(Of TIn, TResource, IQueryable(Of TOut)), System.Boolean)
  name.vb: CrossApplyEntityFrameworkCoreQuery(Of TIn, TResource, TOut)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TResource, IQueryable(Of TOut)), Boolean)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},SaveMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},SaveMode,System.Int32)
  id: ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},SaveMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, ISingleStream<TResource>, SaveMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, ISingleStream<TResource>, SaveMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, System.String, ISingleStream<TResource>, SaveMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 21
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TIn> ThroughEntityFrameworkCore<TIn, TResource>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, SaveMode bulkLoadMode = null, int chunkSize = 1000)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: bulkLoadMode
      type: SaveMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), bulkLoadMode As SaveMode = Nothing, chunkSize As Integer = 1000) As IStream(Of TIn)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, ISingleStream(Of TResource), SaveMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), System.String, ISingleStream(Of TResource), SaveMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, ISingleStream(Of TResource), SaveMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``2}},SaveByKeyMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``3(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``2}},SaveByKeyMode,System.Int32)
  id: ThroughEntityFrameworkCore``3(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``2}},SaveByKeyMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TEntityKey>(IStream<TIn>, String, ISingleStream<TResource>, Expression<Func<TIn, TEntityKey>>, SaveByKeyMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TEntityKey>(IStream<TIn>, String, ISingleStream<TResource>, Expression<Func<TIn, TEntityKey>>, SaveByKeyMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TEntityKey>(IStream<TIn>, System.String, ISingleStream<TResource>, Expression<System.Func<TIn, TEntityKey>>, SaveByKeyMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 36
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TIn> ThroughEntityFrameworkCore<TIn, TResource, TEntityKey>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Expression<Func<TIn, TEntityKey>> getBusinessKey, SaveByKeyMode bulkInsertMode = null, int chunkSize = 100)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: getBusinessKey
      type: Expression{System.Func{{TIn},{TEntityKey}}}
    - id: bulkInsertMode
      type: SaveByKeyMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TEntityKey
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext, TEntityKey)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), getBusinessKey As Expression(Of Func(Of TIn, TEntityKey)), bulkInsertMode As SaveByKeyMode = Nothing, chunkSize As Integer = 100) As IStream(Of TIn)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey)(IStream(Of TIn), String, ISingleStream(Of TResource), Expression(Of Func(Of TIn, TEntityKey)), SaveByKeyMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey)(IStream(Of TIn), System.String, ISingleStream(Of TResource), Expression(Of System.Func(Of TIn, TEntityKey)), SaveByKeyMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey)(IStream(Of TIn), String, ISingleStream(Of TResource), Expression(Of Func(Of TIn, TEntityKey)), SaveByKeyMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``0,System.Boolean}},System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``0,System.Boolean}},System.Int32)
  id: ThroughEntityFrameworkCore``2(IStream{``0},System.String,ISingleStream{``1},Expression{System.Func{``0,``0,System.Boolean}},System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, ISingleStream<TResource>, Expression<Func<TIn, TIn, Boolean>>, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, String, ISingleStream<TResource>, Expression<Func<TIn, TIn, Boolean>>, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource>(IStream<TIn>, System.String, ISingleStream<TResource>, Expression<System.Func<TIn, TIn, System.Boolean>>, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 52
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TIn> ThroughEntityFrameworkCore<TIn, TResource>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Expression<Func<TIn, TIn, bool>> compare, int chunkSize = 100)
          where TIn : class where TResource : DbContext
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: compare
      type: Expression{System.Func{{TIn},{TIn},System.Boolean}}
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn As Class, TResource As DbContext)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), compare As Expression(Of Func(Of TIn, TIn, Boolean)), chunkSize As Integer = 100) As IStream(Of TIn)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, ISingleStream(Of TResource), Expression(Of Func(Of TIn, TIn, Boolean)), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), System.String, ISingleStream(Of TResource), Expression(Of System.Func(Of TIn, TIn, System.Boolean)), System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource)(IStream(Of TIn), String, ISingleStream(Of TResource), Expression(Of Func(Of TIn, TIn, Boolean)), Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},System.Func{``0,``3,``2},SaveMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},System.Func{``0,``3,``2},SaveMode,System.Int32)
  id: ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},System.Func{``0,``3,``2},SaveMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Func<TIn, TInEf, TOut>, SaveMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Func<TIn, TInEf, TOut>, SaveMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, System.String, ISingleStream<TResource>, System.Func<TIn, TInEf>, System.Func<TIn, TInEf, TOut>, SaveMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 68
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Func<TIn, TInEf> getEntity, Func<TIn, TInEf, TOut> getResult, SaveMode bulkLoadMode = null, int chunkSize = 1000)
          where TResource : DbContext where TInEf : class
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: getEntity
      type: System.Func{{TIn},{TInEf}}
    - id: getResult
      type: System.Func{{TIn},{TInEf},{TOut}}
    - id: bulkLoadMode
      type: SaveMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TOut
    - id: TInEf
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn, TResource As DbContext, TOut, TInEf As Class)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), getEntity As Func(Of TIn, TInEf), getResult As Func(Of TIn, TInEf, TOut), bulkLoadMode As SaveMode = Nothing, chunkSize As Integer = 1000) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Func(Of TIn, TInEf, TOut), SaveMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), System.String, ISingleStream(Of TResource), System.Func(Of TIn, TInEf), System.Func(Of TIn, TInEf, TOut), SaveMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Func(Of TIn, TInEf, TOut), SaveMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``5(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``4},Expression{System.Func{``4,``2}},System.Func{``0,``4,``3},SaveByKeyMode,System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``5(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``4},Expression{System.Func{``4,``2}},System.Func{``0,``4,``3},SaveByKeyMode,System.Int32)
  id: ThroughEntityFrameworkCore``5(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``4},Expression{System.Func{``4,``2}},System.Func{``0,``4,``3},SaveByKeyMode,System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TEntityKey, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Expression<Func<TInEf, TEntityKey>>, Func<TIn, TInEf, TOut>, SaveByKeyMode, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TEntityKey, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Expression<Func<TInEf, TEntityKey>>, Func<TIn, TInEf, TOut>, SaveByKeyMode, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TEntityKey, TOut, TInEf>(IStream<TIn>, System.String, ISingleStream<TResource>, System.Func<TIn, TInEf>, Expression<System.Func<TInEf, TEntityKey>>, System.Func<TIn, TInEf, TOut>, SaveByKeyMode, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 83
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> ThroughEntityFrameworkCore<TIn, TResource, TEntityKey, TOut, TInEf>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Func<TIn, TInEf> getEntity, Expression<Func<TInEf, TEntityKey>> getBusinessKey, Func<TIn, TInEf, TOut> getResult, SaveByKeyMode bulkInsertMode = null, int chunkSize = 100)
          where TResource : DbContext where TInEf : class
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: getEntity
      type: System.Func{{TIn},{TInEf}}
    - id: getBusinessKey
      type: Expression{System.Func{{TInEf},{TEntityKey}}}
    - id: getResult
      type: System.Func{{TIn},{TInEf},{TOut}}
    - id: bulkInsertMode
      type: SaveByKeyMode
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TEntityKey
    - id: TOut
    - id: TInEf
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn, TResource As DbContext, TEntityKey, TOut, TInEf As Class)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), getEntity As Func(Of TIn, TInEf), getBusinessKey As Expression(Of Func(Of TInEf, TEntityKey)), getResult As Func(Of TIn, TInEf, TOut), bulkInsertMode As SaveByKeyMode = Nothing, chunkSize As Integer = 100) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Expression(Of Func(Of TInEf, TEntityKey)), Func(Of TIn, TInEf, TOut), SaveByKeyMode, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey, TOut, TInEf)(IStream(Of TIn), System.String, ISingleStream(Of TResource), System.Func(Of TIn, TInEf), Expression(Of System.Func(Of TInEf, TEntityKey)), System.Func(Of TIn, TInEf, TOut), SaveByKeyMode, System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TEntityKey, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Expression(Of Func(Of TInEf, TEntityKey)), Func(Of TIn, TInEf, TOut), SaveByKeyMode, Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},Expression{System.Func{``3,``3,System.Boolean}},System.Func{``0,``3,``2},System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},Expression{System.Func{``3,``3,System.Boolean}},System.Func{``0,``3,``2},System.Int32)
  id: ThroughEntityFrameworkCore``4(IStream{``0},System.String,ISingleStream{``1},System.Func{``0,``3},Expression{System.Func{``3,``3,System.Boolean}},System.Func{``0,``3,``2},System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Expression<Func<TInEf, TInEf, Boolean>>, Func<TIn, TInEf, TOut>, Int32)
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, String, ISingleStream<TResource>, Func<TIn, TInEf>, Expression<Func<TInEf, TInEf, Boolean>>, Func<TIn, TInEf, TOut>, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(IStream<TIn>, System.String, ISingleStream<TResource>, System.Func<TIn, TInEf>, Expression<System.Func<TInEf, TInEf, System.Boolean>>, System.Func<TIn, TInEf, TOut>, System.Int32)
  type: Method
  source:
    id: ThroughEntityFrameworkCore
    path: ''
    startLine: 99
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> ThroughEntityFrameworkCore<TIn, TResource, TOut, TInEf>(this IStream<TIn> stream, string name, ISingleStream<TResource> dbContextStream, Func<TIn, TInEf> getEntity, Expression<Func<TInEf, TInEf, bool>> compare, Func<TIn, TInEf, TOut> getResult, int chunkSize = 100)
          where TResource : DbContext where TInEf : class
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TResource}}
    - id: getEntity
      type: System.Func{{TIn},{TInEf}}
    - id: compare
      type: Expression{System.Func{{TInEf},{TInEf},System.Boolean}}
    - id: getResult
      type: System.Func{{TIn},{TInEf},{TOut}}
    - id: chunkSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TResource
    - id: TOut
    - id: TInEf
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThroughEntityFrameworkCore(Of TIn, TResource As DbContext, TOut, TInEf As Class)(stream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TResource), getEntity As Func(Of TIn, TInEf), compare As Expression(Of Func(Of TInEf, TInEf, Boolean)), getResult As Func(Of TIn, TInEf, TOut), chunkSize As Integer = 100) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  nameWithType.vb: EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Expression(Of Func(Of TInEf, TInEf, Boolean)), Func(Of TIn, TInEf, TOut), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), System.String, ISingleStream(Of TResource), System.Func(Of TIn, TInEf), Expression(Of System.Func(Of TInEf, TInEf, System.Boolean)), System.Func(Of TIn, TInEf, TOut), System.Int32)
  name.vb: ThroughEntityFrameworkCore(Of TIn, TResource, TOut, TInEf)(IStream(Of TIn), String, ISingleStream(Of TResource), Func(Of TIn, TInEf), Expression(Of Func(Of TInEf, TInEf, Boolean)), Func(Of TIn, TInEf, TOut), Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup``4(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}},System.Func{``0,``1,``3},System.Int32)
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup``4(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}},System.Func{``0,``1,``3},System.Int32)
  id: EntityFrameworkCoreLookup``4(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}},System.Func{``0,``1,``3},System.Int32)
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: EntityFrameworkCoreLookup<TIn, TEntity, TCtx, TOut>(IStream<TIn>, String, ISingleStream<TCtx>, Expression<Func<TIn, TEntity, Boolean>>, Func<TIn, TEntity, TOut>, Int32)
  nameWithType: EntityFrameworkCoreEx.EntityFrameworkCoreLookup<TIn, TEntity, TCtx, TOut>(IStream<TIn>, String, ISingleStream<TCtx>, Expression<Func<TIn, TEntity, Boolean>>, Func<TIn, TEntity, TOut>, Int32)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup<TIn, TEntity, TCtx, TOut>(IStream<TIn>, System.String, ISingleStream<TCtx>, Expression<System.Func<TIn, TEntity, System.Boolean>>, System.Func<TIn, TEntity, TOut>, System.Int32)
  type: Method
  source:
    id: EntityFrameworkCoreLookup
    path: ''
    startLine: 114
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TOut> EntityFrameworkCoreLookup<TIn, TEntity, TCtx, TOut>(this IStream<TIn> inputStream, string name, ISingleStream<TCtx> dbContextStream, Expression<Func<TIn, TEntity, bool>> match, Func<TIn, TEntity, TOut> resultSelector, int cacheSize = 1000)
          where TEntity : class where TCtx : DbContext
    parameters:
    - id: inputStream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TCtx}}
    - id: match
      type: Expression{System.Func{{TIn},{TEntity},System.Boolean}}
    - id: resultSelector
      type: System.Func{{TIn},{TEntity},{TOut}}
    - id: cacheSize
      type: System.Int32
    typeParameters:
    - id: TIn
    - id: TEntity
    - id: TCtx
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EntityFrameworkCoreLookup(Of TIn, TEntity As Class, TCtx As DbContext, TOut)(inputStream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TCtx), match As Expression(Of Func(Of TIn, TEntity, Boolean)), resultSelector As Func(Of TIn, TEntity, TOut), cacheSize As Integer = 1000) As IStream(Of TOut)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup*
  nameWithType.vb: EntityFrameworkCoreEx.EntityFrameworkCoreLookup(Of TIn, TEntity, TCtx, TOut)(IStream(Of TIn), String, ISingleStream(Of TCtx), Expression(Of Func(Of TIn, TEntity, Boolean)), Func(Of TIn, TEntity, TOut), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup(Of TIn, TEntity, TCtx, TOut)(IStream(Of TIn), System.String, ISingleStream(Of TCtx), Expression(Of System.Func(Of TIn, TEntity, System.Boolean)), System.Func(Of TIn, TEntity, TOut), System.Int32)
  name.vb: EntityFrameworkCoreLookup(Of TIn, TEntity, TCtx, TOut)(IStream(Of TIn), String, ISingleStream(Of TCtx), Expression(Of Func(Of TIn, TEntity, Boolean)), Func(Of TIn, TEntity, TOut), Int32)
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete``3(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}})
  commentId: M:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete``3(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}})
  id: EntityFrameworkCoreDelete``3(IStream{``0},System.String,ISingleStream{``2},Expression{System.Func{``0,``1,System.Boolean}})
  isExtensionMethod: true
  parent: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx
  langs:
  - csharp
  - vb
  name: EntityFrameworkCoreDelete<TIn, TEntity, TCtx>(IStream<TIn>, String, ISingleStream<TCtx>, Expression<Func<TIn, TEntity, Boolean>>)
  nameWithType: EntityFrameworkCoreEx.EntityFrameworkCoreDelete<TIn, TEntity, TCtx>(IStream<TIn>, String, ISingleStream<TCtx>, Expression<Func<TIn, TEntity, Boolean>>)
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete<TIn, TEntity, TCtx>(IStream<TIn>, System.String, ISingleStream<TCtx>, Expression<System.Func<TIn, TEntity, System.Boolean>>)
  type: Method
  source:
    id: EntityFrameworkCoreDelete
    path: ''
    startLine: 127
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.EntityFrameworkCore.Extensions
  syntax:
    content: >-
      public static IStream<TIn> EntityFrameworkCoreDelete<TIn, TEntity, TCtx>(this IStream<TIn> inputStream, string name, ISingleStream<TCtx> dbContextStream, Expression<Func<TIn, TEntity, bool>> match)
          where TEntity : class where TCtx : DbContext
    parameters:
    - id: inputStream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: dbContextStream
      type: ISingleStream{{TCtx}}
    - id: match
      type: Expression{System.Func{{TIn},{TEntity},System.Boolean}}
    typeParameters:
    - id: TIn
    - id: TEntity
    - id: TCtx
    return:
      type: IStream{{TIn}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EntityFrameworkCoreDelete(Of TIn, TEntity As Class, TCtx As DbContext)(inputStream As IStream(Of TIn), name As String, dbContextStream As ISingleStream(Of TCtx), match As Expression(Of Func(Of TIn, TEntity, Boolean))) As IStream(Of TIn)
  overload: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete*
  nameWithType.vb: EntityFrameworkCoreEx.EntityFrameworkCoreDelete(Of TIn, TEntity, TCtx)(IStream(Of TIn), String, ISingleStream(Of TCtx), Expression(Of Func(Of TIn, TEntity, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete(Of TIn, TEntity, TCtx)(IStream(Of TIn), System.String, ISingleStream(Of TCtx), Expression(Of System.Func(Of TIn, TEntity, System.Boolean)))
  name.vb: EntityFrameworkCoreDelete(Of TIn, TEntity, TCtx)(IStream(Of TIn), String, ISingleStream(Of TCtx), Expression(Of Func(Of TIn, TEntity, Boolean)))
references:
- uid: Paillave.Etl.EntityFrameworkCore.Extensions
  commentId: N:Paillave.Etl.EntityFrameworkCore.Extensions
  name: Paillave.Etl.EntityFrameworkCore.Extensions
  nameWithType: Paillave.Etl.EntityFrameworkCore.Extensions
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
  name: CrossApplyEntityFrameworkCoreQuery
  nameWithType: EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.CrossApplyEntityFrameworkCoreQuery
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ISingleStream{{TResource}}
  commentId: '!:ISingleStream{``1}'
  definition: ISingleStream`1
  name: ISingleStream<TResource>
  nameWithType: ISingleStream<TResource>
  fullName: ISingleStream<TResource>
  nameWithType.vb: ISingleStream(Of TResource)
  fullName.vb: ISingleStream(Of TResource)
  name.vb: ISingleStream(Of TResource)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TResource},IQueryable{{TOut}}}
  commentId: T:System.Func{``0,``1,IQueryable{``2}}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TResource, IQueryable<TOut>>
  nameWithType: Func<TIn, TResource, IQueryable<TOut>>
  fullName: System.Func<TIn, TResource, IQueryable<TOut>>
  nameWithType.vb: Func(Of TIn, TResource, IQueryable(Of TOut))
  fullName.vb: System.Func(Of TIn, TResource, IQueryable(Of TOut))
  name.vb: Func(Of TIn, TResource, IQueryable(Of TOut))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResource
    nameWithType: TResource
    fullName: TResource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IStream{{TOut}}
  commentId: '!:IStream{``2}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ISingleStream`1
  isExternal: true
  name: ISingleStream<>
  nameWithType: ISingleStream<>
  fullName: ISingleStream<>
  nameWithType.vb: ISingleStream(Of )
  fullName.vb: ISingleStream(Of )
  name.vb: ISingleStream(Of )
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore
  name: ThroughEntityFrameworkCore
  nameWithType: EntityFrameworkCoreEx.ThroughEntityFrameworkCore
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.ThroughEntityFrameworkCore
- uid: SaveMode
  isExternal: true
  name: SaveMode
  nameWithType: SaveMode
  fullName: SaveMode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Expression{System.Func{{TIn},{TEntityKey}}}
  commentId: '!:Expression{System.Func{``0,``2}}'
  definition: Expression`1
  name: Expression<Func<TIn, TEntityKey>>
  nameWithType: Expression<Func<TIn, TEntityKey>>
  fullName: Expression<System.Func<TIn, TEntityKey>>
  nameWithType.vb: Expression(Of Func(Of TIn, TEntityKey))
  fullName.vb: Expression(Of System.Func(Of TIn, TEntityKey))
  name.vb: Expression(Of Func(Of TIn, TEntityKey))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityKey
    nameWithType: TEntityKey
    fullName: TEntityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityKey
    nameWithType: TEntityKey
    fullName: TEntityKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SaveByKeyMode
  isExternal: true
  name: SaveByKeyMode
  nameWithType: SaveByKeyMode
  fullName: SaveByKeyMode
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Func{{TIn},{TIn},System.Boolean}}
  commentId: '!:Expression{System.Func{``0,``0,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<TIn, TIn, Boolean>>
  nameWithType: Expression<Func<TIn, TIn, Boolean>>
  fullName: Expression<System.Func<TIn, TIn, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TIn, TIn, Boolean))
  fullName.vb: Expression(Of System.Func(Of TIn, TIn, System.Boolean))
  name.vb: Expression(Of Func(Of TIn, TIn, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TInEf}}
  commentId: T:System.Func{``0,``3}
  parent: System
  definition: System.Func`2
  name: Func<TIn, TInEf>
  nameWithType: Func<TIn, TInEf>
  fullName: System.Func<TIn, TInEf>
  nameWithType.vb: Func(Of TIn, TInEf)
  fullName.vb: System.Func(Of TIn, TInEf)
  name.vb: Func(Of TIn, TInEf)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TInEf},{TOut}}
  commentId: T:System.Func{``0,``3,``2}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TInEf, TOut>
  nameWithType: Func<TIn, TInEf, TOut>
  fullName: System.Func<TIn, TInEf, TOut>
  nameWithType.vb: Func(Of TIn, TInEf, TOut)
  fullName.vb: System.Func(Of TIn, TInEf, TOut)
  name.vb: Func(Of TIn, TInEf, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Func{{TInEf},{TEntityKey}}}
  commentId: '!:Expression{System.Func{``4,``2}}'
  definition: Expression`1
  name: Expression<Func<TInEf, TEntityKey>>
  nameWithType: Expression<Func<TInEf, TEntityKey>>
  fullName: Expression<System.Func<TInEf, TEntityKey>>
  nameWithType.vb: Expression(Of Func(Of TInEf, TEntityKey))
  fullName.vb: Expression(Of System.Func(Of TInEf, TEntityKey))
  name.vb: Expression(Of Func(Of TInEf, TEntityKey))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityKey
    nameWithType: TEntityKey
    fullName: TEntityKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntityKey
    nameWithType: TEntityKey
    fullName: TEntityKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Func{{TInEf},{TInEf},System.Boolean}}
  commentId: '!:Expression{System.Func{``3,``3,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<TInEf, TInEf, Boolean>>
  nameWithType: Expression<Func<TInEf, TInEf, Boolean>>
  fullName: Expression<System.Func<TInEf, TInEf, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TInEf, TInEf, Boolean))
  fullName.vb: Expression(Of System.Func(Of TInEf, TInEf, System.Boolean))
  name.vb: Expression(Of Func(Of TInEf, TInEf, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInEf
    nameWithType: TInEf
    fullName: TInEf
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup
  name: EntityFrameworkCoreLookup
  nameWithType: EntityFrameworkCoreEx.EntityFrameworkCoreLookup
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreLookup
- uid: ISingleStream{{TCtx}}
  commentId: '!:ISingleStream{``2}'
  definition: ISingleStream`1
  name: ISingleStream<TCtx>
  nameWithType: ISingleStream<TCtx>
  fullName: ISingleStream<TCtx>
  nameWithType.vb: ISingleStream(Of TCtx)
  fullName.vb: ISingleStream(Of TCtx)
  name.vb: ISingleStream(Of TCtx)
  spec.csharp:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISingleStream`1
    name: ISingleStream
    nameWithType: ISingleStream
    fullName: ISingleStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCtx
    nameWithType: TCtx
    fullName: TCtx
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{System.Func{{TIn},{TEntity},System.Boolean}}
  commentId: '!:Expression{System.Func{``0,``1,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<TIn, TEntity, Boolean>>
  nameWithType: Expression<Func<TIn, TEntity, Boolean>>
  fullName: Expression<System.Func<TIn, TEntity, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TIn, TEntity, Boolean))
  fullName.vb: Expression(Of System.Func(Of TIn, TEntity, System.Boolean))
  name.vb: Expression(Of Func(Of TIn, TEntity, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TEntity},{TOut}}
  commentId: T:System.Func{``0,``1,``3}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TEntity, TOut>
  nameWithType: Func<TIn, TEntity, TOut>
  fullName: System.Func<TIn, TEntity, TOut>
  nameWithType.vb: Func(Of TIn, TEntity, TOut)
  fullName.vb: System.Func(Of TIn, TEntity, TOut)
  name.vb: Func(Of TIn, TEntity, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete*
  commentId: Overload:Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete
  name: EntityFrameworkCoreDelete
  nameWithType: EntityFrameworkCoreEx.EntityFrameworkCoreDelete
  fullName: Paillave.Etl.EntityFrameworkCore.Extensions.EntityFrameworkCoreEx.EntityFrameworkCoreDelete
