### YamlMime:ManagedReference
items:
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  commentId: T:Paillave.Etl.XmlFile.Extensions.XmlFileEx
  id: XmlFileEx
  parent: Paillave.Etl.XmlFile.Extensions
  children:
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{LocalFilesValue},System.String,XmlFileDefinition,System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{Stream},System.String,XmlFileDefinition,System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{System.String},System.String,XmlFileDefinition,System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{LocalFilesValue},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlFileDefinition,System.Func{XmlNodeParsed,``0},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlFileDefinition,System.Func{System.String,XmlNodeParsed,``0},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Func{``0,XmlNodeParsed,``1},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Func{``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Func{System.String,``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  - Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``3(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Func{``0,``1,``2},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  langs:
  - csharp
  - vb
  name: XmlFileEx
  nameWithType: XmlFileEx
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  type: Class
  source:
    id: XmlFileEx
    path: ''
    startLine: 586
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static class XmlFileEx
    content.vb: Public Module XmlFileEx
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TOut>(IStream<String>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TOut>(IStream<String>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TOut>(IStream<System.String>, System.String, XmlNodeDefinition<TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 588
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TOut>(this IStream<string> stream, string name, XmlNodeDefinition<TOut> xmlNodeDefinitions, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{System.String}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TOut)(stream As IStream(Of String), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of String), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of System.String), System.String, XmlNodeDefinition(Of TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TOut)(IStream(Of String), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{LocalFilesValue},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{LocalFilesValue},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{LocalFilesValue},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TOut>(IStream<LocalFilesValue>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TOut>(IStream<LocalFilesValue>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TOut>(IStream<LocalFilesValue>, System.String, XmlNodeDefinition<TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 599
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TOut>(this IStream<LocalFilesValue> stream, string name, XmlNodeDefinition<TOut> xmlNodeDefinitions, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{LocalFilesValue}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TOut)(stream As IStream(Of LocalFilesValue), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of LocalFilesValue), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of LocalFilesValue), System.String, XmlNodeDefinition(Of TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TOut)(IStream(Of LocalFilesValue), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TOut>(IStream<Stream>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TOut>(IStream<Stream>, String, XmlNodeDefinition<TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TOut>(IStream<Stream>, System.String, XmlNodeDefinition<TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 610
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TOut>(this IStream<Stream> stream, string name, XmlNodeDefinition<TOut> xmlNodeDefinitions, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{Stream}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TOut)(stream As IStream(Of Stream), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of Stream), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of Stream), System.String, XmlNodeDefinition(Of TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TOut)(IStream(Of Stream), String, XmlNodeDefinition(Of TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``2(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, String, XmlNodeDefinition<TOut>, Func<TIn, String>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, String, XmlNodeDefinition<TOut>, Func<TIn, String>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, System.String, XmlNodeDefinition<TOut>, System.Func<TIn, System.String>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 621
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TIn, TOut>(this IStream<TIn> stream, string name, XmlNodeDefinition<TOut> xmlNodeDefinitions, Func<TIn, string> filePathSelector, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TOut}}
    - id: filePathSelector
      type: System.Func{{TIn},System.String}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TIn, TOut)(stream As IStream(Of TIn), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TOut), filePathSelector As Func(Of TIn, String), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), String, XmlNodeDefinition(Of TOut), Func(Of TIn, String), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), System.String, XmlNodeDefinition(Of TOut), System.Func(Of TIn, System.String), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), String, XmlNodeDefinition(Of TOut), Func(Of TIn, String), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``3(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Func{``0,``1,``2},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``3(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Func{``0,``1,``2},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``3(IStream{``0},System.String,XmlNodeDefinition{``1},System.Func{``0,System.String},System.Func{``0,``1,``2},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TIn, TParsed, TOut>(IStream<TIn>, String, XmlNodeDefinition<TParsed>, Func<TIn, String>, Func<TIn, TParsed, TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TIn, TParsed, TOut>(IStream<TIn>, String, XmlNodeDefinition<TParsed>, Func<TIn, String>, Func<TIn, TParsed, TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TIn, TParsed, TOut>(IStream<TIn>, System.String, XmlNodeDefinition<TParsed>, System.Func<TIn, System.String>, System.Func<TIn, TParsed, TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 632
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TIn, TParsed, TOut>(this IStream<TIn> stream, string name, XmlNodeDefinition<TParsed> xmlNodeDefinitions, Func<TIn, string> filePathSelector, Func<TIn, TParsed, TOut> resultSelector, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TParsed}}
    - id: filePathSelector
      type: System.Func{{TIn},System.String}
    - id: resultSelector
      type: System.Func{{TIn},{TParsed},{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TParsed
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TIn, TParsed, TOut)(stream As IStream(Of TIn), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TParsed), filePathSelector As Func(Of TIn, String), resultSelector As Func(Of TIn, TParsed, TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TIn, TParsed, TOut)(IStream(Of TIn), String, XmlNodeDefinition(Of TParsed), Func(Of TIn, String), Func(Of TIn, TParsed, TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TIn, TParsed, TOut)(IStream(Of TIn), System.String, XmlNodeDefinition(Of TParsed), System.Func(Of TIn, System.String), System.Func(Of TIn, TParsed, TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TIn, TParsed, TOut)(IStream(Of TIn), String, XmlNodeDefinition(Of TParsed), Func(Of TIn, String), Func(Of TIn, TParsed, TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Func{System.String,``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Func{System.String,``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``2(IStream{System.String},System.String,XmlNodeDefinition{``0},System.Func{System.String,``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TParsed, TOut>(IStream<String>, String, XmlNodeDefinition<TParsed>, Func<String, TParsed, TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TParsed, TOut>(IStream<String>, String, XmlNodeDefinition<TParsed>, Func<String, TParsed, TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TParsed, TOut>(IStream<System.String>, System.String, XmlNodeDefinition<TParsed>, System.Func<System.String, TParsed, TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 643
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TParsed, TOut>(this IStream<string> stream, string name, XmlNodeDefinition<TParsed> xmlNodeDefinitions, Func<string, TParsed, TOut> resultSelector, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{System.String}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TParsed}}
    - id: resultSelector
      type: System.Func{System.String,{TParsed},{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TParsed
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TParsed, TOut)(stream As IStream(Of String), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TParsed), resultSelector As Func(Of String, TParsed, TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of String), String, XmlNodeDefinition(Of TParsed), Func(Of String, TParsed, TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of System.String), System.String, XmlNodeDefinition(Of TParsed), System.Func(Of System.String, TParsed, TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of String), String, XmlNodeDefinition(Of TParsed), Func(Of String, TParsed, TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Func{``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Func{``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  id: CrossApplyXmlFile``2(IStream{Stream},System.String,XmlNodeDefinition{``0},System.Func{``0,``1},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TParsed, TOut>(IStream<Stream>, String, XmlNodeDefinition<TParsed>, Func<TParsed, TOut>, IDictionary<String, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TParsed, TOut>(IStream<Stream>, String, XmlNodeDefinition<TParsed>, Func<TParsed, TOut>, IDictionary<String, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TParsed, TOut>(IStream<Stream>, System.String, XmlNodeDefinition<TParsed>, System.Func<TParsed, TOut>, System.Collections.Generic.IDictionary<System.String, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 654
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TParsed, TOut>(this IStream<Stream> stream, string name, XmlNodeDefinition<TParsed> xmlNodeDefinitions, Func<TParsed, TOut> resultSelector, IDictionary<string, string> prefixToUriNamespaces = null, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{Stream}
    - id: name
      type: System.String
    - id: xmlNodeDefinitions
      type: XmlNodeDefinition{{TParsed}}
    - id: resultSelector
      type: System.Func{{TParsed},{TOut}}
    - id: prefixToUriNamespaces
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TParsed
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TParsed, TOut)(stream As IStream(Of Stream), name As String, xmlNodeDefinitions As XmlNodeDefinition(Of TParsed), resultSelector As Func(Of TParsed, TOut), prefixToUriNamespaces As IDictionary(Of String, String) = Nothing, noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of Stream), String, XmlNodeDefinition(Of TParsed), Func(Of TParsed, TOut), IDictionary(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of Stream), System.String, XmlNodeDefinition(Of TParsed), System.Func(Of TParsed, TOut), System.Collections.Generic.IDictionary(Of System.String, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TParsed, TOut)(IStream(Of Stream), String, XmlNodeDefinition(Of TParsed), Func(Of TParsed, TOut), IDictionary(Of String, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{System.String},System.String,XmlFileDefinition,System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{System.String},System.String,XmlFileDefinition,System.Boolean)
  id: CrossApplyXmlFile(IStream{System.String},System.String,XmlFileDefinition,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile(IStream<String>, String, XmlFileDefinition, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile(IStream<String>, String, XmlFileDefinition, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream<System.String>, System.String, XmlFileDefinition, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 666
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<XmlNodeParsed> CrossApplyXmlFile(this IStream<string> stream, string name, XmlFileDefinition xmlFileDefinition, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{System.String}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: noParallelisation
      type: System.Boolean
    return:
      type: IStream{XmlNodeParsed}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(stream As IStream(Of String), name As String, xmlFileDefinition As XmlFileDefinition, noParallelisation As Boolean = False) As IStream(Of XmlNodeParsed)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(IStream(Of String), String, XmlFileDefinition, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream(Of System.String), System.String, XmlFileDefinition, System.Boolean)
  name.vb: CrossApplyXmlFile(IStream(Of String), String, XmlFileDefinition, Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{LocalFilesValue},System.String,XmlFileDefinition,System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{LocalFilesValue},System.String,XmlFileDefinition,System.Boolean)
  id: CrossApplyXmlFile(IStream{LocalFilesValue},System.String,XmlFileDefinition,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile(IStream<LocalFilesValue>, String, XmlFileDefinition, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile(IStream<LocalFilesValue>, String, XmlFileDefinition, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream<LocalFilesValue>, System.String, XmlFileDefinition, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 676
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<XmlNodeParsed> CrossApplyXmlFile(this IStream<LocalFilesValue> stream, string name, XmlFileDefinition xmlFileDefinition, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{LocalFilesValue}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: noParallelisation
      type: System.Boolean
    return:
      type: IStream{XmlNodeParsed}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(stream As IStream(Of LocalFilesValue), name As String, xmlFileDefinition As XmlFileDefinition, noParallelisation As Boolean = False) As IStream(Of XmlNodeParsed)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(IStream(Of LocalFilesValue), String, XmlFileDefinition, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream(Of LocalFilesValue), System.String, XmlFileDefinition, System.Boolean)
  name.vb: CrossApplyXmlFile(IStream(Of LocalFilesValue), String, XmlFileDefinition, Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{Stream},System.String,XmlFileDefinition,System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream{Stream},System.String,XmlFileDefinition,System.Boolean)
  id: CrossApplyXmlFile(IStream{Stream},System.String,XmlFileDefinition,System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile(IStream<Stream>, String, XmlFileDefinition, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile(IStream<Stream>, String, XmlFileDefinition, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream<Stream>, System.String, XmlFileDefinition, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 686
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<XmlNodeParsed> CrossApplyXmlFile(this IStream<Stream> stream, string name, XmlFileDefinition xmlFileDefinition, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{Stream}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: noParallelisation
      type: System.Boolean
    return:
      type: IStream{XmlNodeParsed}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(stream As IStream(Of Stream), name As String, xmlFileDefinition As XmlFileDefinition, noParallelisation As Boolean = False) As IStream(Of XmlNodeParsed)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(IStream(Of Stream), String, XmlFileDefinition, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(IStream(Of Stream), System.String, XmlFileDefinition, System.Boolean)
  name.vb: CrossApplyXmlFile(IStream(Of Stream), String, XmlFileDefinition, Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TIn>(IStream<TIn>, String, XmlFileDefinition, Func<TIn, String>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TIn>(IStream<TIn>, String, XmlFileDefinition, Func<TIn, String>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TIn>(IStream<TIn>, System.String, XmlFileDefinition, System.Func<TIn, System.String>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 696
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<XmlNodeParsed> CrossApplyXmlFile<TIn>(this IStream<TIn> stream, string name, XmlFileDefinition xmlFileDefinition, Func<TIn, string> filePathSelector, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: filePathSelector
      type: System.Func{{TIn},System.String}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    return:
      type: IStream{XmlNodeParsed}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TIn)(stream As IStream(Of TIn), name As String, xmlFileDefinition As XmlFileDefinition, filePathSelector As Func(Of TIn, String), noParallelisation As Boolean = False) As IStream(Of XmlNodeParsed)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TIn)(IStream(Of TIn), String, XmlFileDefinition, Func(Of TIn, String), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TIn)(IStream(Of TIn), System.String, XmlFileDefinition, System.Func(Of TIn, System.String), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TIn)(IStream(Of TIn), String, XmlFileDefinition, Func(Of TIn, String), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Func{``0,XmlNodeParsed,``1},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``2(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Func{``0,XmlNodeParsed,``1},System.Boolean)
  id: CrossApplyXmlFile``2(IStream{``0},System.String,XmlFileDefinition,System.Func{``0,System.String},System.Func{``0,XmlNodeParsed,``1},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, String, XmlFileDefinition, Func<TIn, String>, Func<TIn, XmlNodeParsed, TOut>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, String, XmlFileDefinition, Func<TIn, String>, Func<TIn, XmlNodeParsed, TOut>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TIn, TOut>(IStream<TIn>, System.String, XmlFileDefinition, System.Func<TIn, System.String>, System.Func<TIn, XmlNodeParsed, TOut>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 706
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TIn, TOut>(this IStream<TIn> stream, string name, XmlFileDefinition xmlFileDefinition, Func<TIn, string> filePathSelector, Func<TIn, XmlNodeParsed, TOut> resultSelector, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{{TIn}}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: filePathSelector
      type: System.Func{{TIn},System.String}
    - id: resultSelector
      type: System.Func{{TIn},XmlNodeParsed,{TOut}}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TIn
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TIn, TOut)(stream As IStream(Of TIn), name As String, xmlFileDefinition As XmlFileDefinition, filePathSelector As Func(Of TIn, String), resultSelector As Func(Of TIn, XmlNodeParsed, TOut), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), String, XmlFileDefinition, Func(Of TIn, String), Func(Of TIn, XmlNodeParsed, TOut), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), System.String, XmlFileDefinition, System.Func(Of TIn, System.String), System.Func(Of TIn, XmlNodeParsed, TOut), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TIn, TOut)(IStream(Of TIn), String, XmlFileDefinition, Func(Of TIn, String), Func(Of TIn, XmlNodeParsed, TOut), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlFileDefinition,System.Func{System.String,XmlNodeParsed,``0},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{System.String},System.String,XmlFileDefinition,System.Func{System.String,XmlNodeParsed,``0},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{System.String},System.String,XmlFileDefinition,System.Func{System.String,XmlNodeParsed,``0},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TOut>(IStream<String>, String, XmlFileDefinition, Func<String, XmlNodeParsed, TOut>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TOut>(IStream<String>, String, XmlFileDefinition, Func<String, XmlNodeParsed, TOut>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TOut>(IStream<System.String>, System.String, XmlFileDefinition, System.Func<System.String, XmlNodeParsed, TOut>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 716
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TOut>(this IStream<string> stream, string name, XmlFileDefinition xmlFileDefinition, Func<string, XmlNodeParsed, TOut> resultSelector, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{System.String}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: resultSelector
      type: System.Func{System.String,XmlNodeParsed,{TOut}}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TOut)(stream As IStream(Of String), name As String, xmlFileDefinition As XmlFileDefinition, resultSelector As Func(Of String, XmlNodeParsed, TOut), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of String), String, XmlFileDefinition, Func(Of String, XmlNodeParsed, TOut), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of System.String), System.String, XmlFileDefinition, System.Func(Of System.String, XmlNodeParsed, TOut), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TOut)(IStream(Of String), String, XmlFileDefinition, Func(Of String, XmlNodeParsed, TOut), Boolean)
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlFileDefinition,System.Func{XmlNodeParsed,``0},System.Boolean)
  commentId: M:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile``1(IStream{Stream},System.String,XmlFileDefinition,System.Func{XmlNodeParsed,``0},System.Boolean)
  id: CrossApplyXmlFile``1(IStream{Stream},System.String,XmlFileDefinition,System.Func{XmlNodeParsed,``0},System.Boolean)
  isExtensionMethod: true
  parent: Paillave.Etl.XmlFile.Extensions.XmlFileEx
  langs:
  - csharp
  - vb
  name: CrossApplyXmlFile<TOut>(IStream<Stream>, String, XmlFileDefinition, Func<XmlNodeParsed, TOut>, Boolean)
  nameWithType: XmlFileEx.CrossApplyXmlFile<TOut>(IStream<Stream>, String, XmlFileDefinition, Func<XmlNodeParsed, TOut>, Boolean)
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile<TOut>(IStream<Stream>, System.String, XmlFileDefinition, System.Func<XmlNodeParsed, TOut>, System.Boolean)
  type: Method
  source:
    id: CrossApplyXmlFile
    path: ''
    startLine: 726
  assemblies:
  - cs.temp.dll
  namespace: Paillave.Etl.XmlFile.Extensions
  syntax:
    content: public static IStream<TOut> CrossApplyXmlFile<TOut>(this IStream<Stream> stream, string name, XmlFileDefinition xmlFileDefinition, Func<XmlNodeParsed, TOut> resultSelector, bool noParallelisation = false)
    parameters:
    - id: stream
      type: IStream{Stream}
    - id: name
      type: System.String
    - id: xmlFileDefinition
      type: XmlFileDefinition
    - id: resultSelector
      type: System.Func{XmlNodeParsed,{TOut}}
    - id: noParallelisation
      type: System.Boolean
    typeParameters:
    - id: TOut
    return:
      type: IStream{{TOut}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CrossApplyXmlFile(Of TOut)(stream As IStream(Of Stream), name As String, xmlFileDefinition As XmlFileDefinition, resultSelector As Func(Of XmlNodeParsed, TOut), noParallelisation As Boolean = False) As IStream(Of TOut)
  overload: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  nameWithType.vb: XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of Stream), String, XmlFileDefinition, Func(Of XmlNodeParsed, TOut), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile(Of TOut)(IStream(Of Stream), System.String, XmlFileDefinition, System.Func(Of XmlNodeParsed, TOut), System.Boolean)
  name.vb: CrossApplyXmlFile(Of TOut)(IStream(Of Stream), String, XmlFileDefinition, Func(Of XmlNodeParsed, TOut), Boolean)
references:
- uid: Paillave.Etl.XmlFile.Extensions
  commentId: N:Paillave.Etl.XmlFile.Extensions
  name: Paillave.Etl.XmlFile.Extensions
  nameWithType: Paillave.Etl.XmlFile.Extensions
  fullName: Paillave.Etl.XmlFile.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile*
  commentId: Overload:Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile
  name: CrossApplyXmlFile
  nameWithType: XmlFileEx.CrossApplyXmlFile
  fullName: Paillave.Etl.XmlFile.Extensions.XmlFileEx.CrossApplyXmlFile
- uid: IStream{System.String}
  commentId: '!:IStream{System.String}'
  definition: IStream`1
  name: IStream<String>
  nameWithType: IStream<String>
  fullName: IStream<System.String>
  nameWithType.vb: IStream(Of String)
  fullName.vb: IStream(Of System.String)
  name.vb: IStream(Of String)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: XmlNodeDefinition{{TOut}}
  commentId: '!:XmlNodeDefinition{``0}'
  definition: XmlNodeDefinition`1
  name: XmlNodeDefinition<TOut>
  nameWithType: XmlNodeDefinition<TOut>
  fullName: XmlNodeDefinition<TOut>
  nameWithType.vb: XmlNodeDefinition(Of TOut)
  fullName.vb: XmlNodeDefinition(Of TOut)
  name.vb: XmlNodeDefinition(Of TOut)
  spec.csharp:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IStream{{TOut}}
  commentId: '!:IStream{``2}'
  definition: IStream`1
  name: IStream<TOut>
  nameWithType: IStream<TOut>
  fullName: IStream<TOut>
  nameWithType.vb: IStream(Of TOut)
  fullName.vb: IStream(Of TOut)
  name.vb: IStream(Of TOut)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream`1
  isExternal: true
  name: IStream<>
  nameWithType: IStream<>
  fullName: IStream<>
  nameWithType.vb: IStream(Of )
  fullName.vb: IStream(Of )
  name.vb: IStream(Of )
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: XmlNodeDefinition`1
  isExternal: true
  name: XmlNodeDefinition<>
  nameWithType: XmlNodeDefinition<>
  fullName: XmlNodeDefinition<>
  nameWithType.vb: XmlNodeDefinition(Of )
  fullName.vb: XmlNodeDefinition(Of )
  name.vb: XmlNodeDefinition(Of )
  spec.csharp:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: IStream{LocalFilesValue}
  commentId: '!:IStream{LocalFilesValue}'
  definition: IStream`1
  name: IStream<LocalFilesValue>
  nameWithType: IStream<LocalFilesValue>
  fullName: IStream<LocalFilesValue>
  nameWithType.vb: IStream(Of LocalFilesValue)
  fullName.vb: IStream(Of LocalFilesValue)
  name.vb: IStream(Of LocalFilesValue)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LocalFilesValue
    name: LocalFilesValue
    nameWithType: LocalFilesValue
    fullName: LocalFilesValue
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LocalFilesValue
    name: LocalFilesValue
    nameWithType: LocalFilesValue
    fullName: LocalFilesValue
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{Stream}
  commentId: '!:IStream{Stream}'
  definition: IStream`1
  name: IStream<Stream>
  nameWithType: IStream<Stream>
  fullName: IStream<Stream>
  nameWithType.vb: IStream(Of Stream)
  fullName.vb: IStream(Of Stream)
  name.vb: IStream(Of Stream)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IStream{{TIn}}
  commentId: '!:IStream{``0}'
  definition: IStream`1
  name: IStream<TIn>
  nameWithType: IStream<TIn>
  fullName: IStream<TIn>
  nameWithType.vb: IStream(Of TIn)
  fullName.vb: IStream(Of TIn)
  name.vb: IStream(Of TIn)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<TIn, String>
  nameWithType: Func<TIn, String>
  fullName: System.Func<TIn, System.String>
  nameWithType.vb: Func(Of TIn, String)
  fullName.vb: System.Func(Of TIn, System.String)
  name.vb: Func(Of TIn, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: XmlNodeDefinition{{TParsed}}
  commentId: '!:XmlNodeDefinition{``1}'
  definition: XmlNodeDefinition`1
  name: XmlNodeDefinition<TParsed>
  nameWithType: XmlNodeDefinition<TParsed>
  fullName: XmlNodeDefinition<TParsed>
  nameWithType.vb: XmlNodeDefinition(Of TParsed)
  fullName.vb: XmlNodeDefinition(Of TParsed)
  name.vb: XmlNodeDefinition(Of TParsed)
  spec.csharp:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: XmlNodeDefinition`1
    name: XmlNodeDefinition
    nameWithType: XmlNodeDefinition
    fullName: XmlNodeDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},{TParsed},{TOut}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TIn, TParsed, TOut>
  nameWithType: Func<TIn, TParsed, TOut>
  fullName: System.Func<TIn, TParsed, TOut>
  nameWithType.vb: Func(Of TIn, TParsed, TOut)
  fullName.vb: System.Func(Of TIn, TParsed, TOut)
  name.vb: Func(Of TIn, TParsed, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String,{TParsed},{TOut}}
  commentId: T:System.Func{System.String,``0,``1}
  parent: System
  definition: System.Func`3
  name: Func<String, TParsed, TOut>
  nameWithType: Func<String, TParsed, TOut>
  fullName: System.Func<System.String, TParsed, TOut>
  nameWithType.vb: Func(Of String, TParsed, TOut)
  fullName.vb: System.Func(Of System.String, TParsed, TOut)
  name.vb: Func(Of String, TParsed, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TParsed},{TOut}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TParsed, TOut>
  nameWithType: Func<TParsed, TOut>
  fullName: System.Func<TParsed, TOut>
  nameWithType.vb: Func(Of TParsed, TOut)
  fullName.vb: System.Func(Of TParsed, TOut)
  name.vb: Func(Of TParsed, TOut)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParsed
    nameWithType: TParsed
    fullName: TParsed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: XmlFileDefinition
  isExternal: true
  name: XmlFileDefinition
  nameWithType: XmlFileDefinition
  fullName: XmlFileDefinition
- uid: IStream{XmlNodeParsed}
  commentId: '!:IStream{XmlNodeParsed}'
  definition: IStream`1
  name: IStream<XmlNodeParsed>
  nameWithType: IStream<XmlNodeParsed>
  fullName: IStream<XmlNodeParsed>
  nameWithType.vb: IStream(Of XmlNodeParsed)
  fullName.vb: IStream(Of XmlNodeParsed)
  name.vb: IStream(Of XmlNodeParsed)
  spec.csharp:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IStream`1
    name: IStream
    nameWithType: IStream
    fullName: IStream
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TIn},XmlNodeParsed,{TOut}}
  commentId: T:System.Func{``0,XmlNodeParsed,``1}
  parent: System
  definition: System.Func`3
  name: Func<TIn, XmlNodeParsed, TOut>
  nameWithType: Func<TIn, XmlNodeParsed, TOut>
  fullName: System.Func<TIn, XmlNodeParsed, TOut>
  nameWithType.vb: Func(Of TIn, XmlNodeParsed, TOut)
  fullName.vb: System.Func(Of TIn, XmlNodeParsed, TOut)
  name.vb: Func(Of TIn, XmlNodeParsed, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String,XmlNodeParsed,{TOut}}
  commentId: T:System.Func{System.String,XmlNodeParsed,``0}
  parent: System
  definition: System.Func`3
  name: Func<String, XmlNodeParsed, TOut>
  nameWithType: Func<String, XmlNodeParsed, TOut>
  fullName: System.Func<System.String, XmlNodeParsed, TOut>
  nameWithType.vb: Func(Of String, XmlNodeParsed, TOut)
  fullName.vb: System.Func(Of System.String, XmlNodeParsed, TOut)
  name.vb: Func(Of String, XmlNodeParsed, TOut)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{XmlNodeParsed,{TOut}}
  commentId: T:System.Func{XmlNodeParsed,``0}
  parent: System
  definition: System.Func`2
  name: Func<XmlNodeParsed, TOut>
  nameWithType: Func<XmlNodeParsed, TOut>
  fullName: System.Func<XmlNodeParsed, TOut>
  nameWithType.vb: Func(Of XmlNodeParsed, TOut)
  fullName.vb: System.Func(Of XmlNodeParsed, TOut)
  name.vb: Func(Of XmlNodeParsed, TOut)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: XmlNodeParsed
    name: XmlNodeParsed
    nameWithType: XmlNodeParsed
    fullName: XmlNodeParsed
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
